// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: data.proto

package deppb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType int32  `protobuf:"varint,1,opt,name=msgType,proto3" json:"msgType,omitempty"` //消息类型
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`        //具体数据
}

func (x *ClientReport) Reset() {
	*x = ClientReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReport) ProtoMessage() {}

func (x *ClientReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReport.ProtoReflect.Descriptor instead.
func (*ClientReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *ClientReport) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *ClientReport) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RadarTrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*DbRawAutelRadarPlotTrackBodyEntity `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RadarTrackInfo) Reset() {
	*x = RadarTrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarTrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarTrackInfo) ProtoMessage() {}

func (x *RadarTrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarTrackInfo.ProtoReflect.Descriptor instead.
func (*RadarTrackInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *RadarTrackInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RadarTrackInfo) GetData() []*DbRawAutelRadarPlotTrackBodyEntity {
	if x != nil {
		return x.Data
	}
	return nil
}

type RadarStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *RadarStatusEntity         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RadarStatusInfo) Reset() {
	*x = RadarStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarStatusInfo) ProtoMessage() {}

func (x *RadarStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarStatusInfo.ProtoReflect.Descriptor instead.
func (*RadarStatusInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *RadarStatusInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RadarStatusInfo) GetData() *RadarStatusEntity {
	if x != nil {
		return x.Data
	}
	return nil
}

type DroneStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *DroneIDReport             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DroneStatusInfo) Reset() {
	*x = DroneStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DroneStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DroneStatusInfo) ProtoMessage() {}

func (x *DroneStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DroneStatusInfo.ProtoReflect.Descriptor instead.
func (*DroneStatusInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *DroneStatusInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DroneStatusInfo) GetData() *DroneIDReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type TracerDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *TracerDetectReport        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TracerDetectInfo) Reset() {
	*x = TracerDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerDetectInfo) ProtoMessage() {}

func (x *TracerDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerDetectInfo.ProtoReflect.Descriptor instead.
func (*TracerDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *TracerDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TracerDetectInfo) GetData() *TracerDetectReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type TracerRemoteDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *TracerRemoteDetectReport  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TracerRemoteDetectInfo) Reset() {
	*x = TracerRemoteDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerRemoteDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerRemoteDetectInfo) ProtoMessage() {}

func (x *TracerRemoteDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerRemoteDetectInfo.ProtoReflect.Descriptor instead.
func (*TracerRemoteDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *TracerRemoteDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TracerRemoteDetectInfo) GetData() *TracerRemoteDetectReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type TracerFreqDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *TracerFreqDetectReport    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TracerFreqDetectInfo) Reset() {
	*x = TracerFreqDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerFreqDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerFreqDetectInfo) ProtoMessage() {}

func (x *TracerFreqDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerFreqDetectInfo.ProtoReflect.Descriptor instead.
func (*TracerFreqDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *TracerFreqDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TracerFreqDetectInfo) GetData() *TracerFreqDetectReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type TracerFreqDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *TracerSFreqDataReport     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TracerFreqDataInfo) Reset() {
	*x = TracerFreqDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerFreqDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerFreqDataInfo) ProtoMessage() {}

func (x *TracerFreqDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerFreqDataInfo.ProtoReflect.Descriptor instead.
func (*TracerFreqDataInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *TracerFreqDataInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TracerFreqDataInfo) GetData() *TracerSFreqDataReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type RadarPosture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *RadarUploadPostureEntity  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RadarPosture) Reset() {
	*x = RadarPosture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarPosture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarPosture) ProtoMessage() {}

func (x *RadarPosture) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarPosture.ProtoReflect.Descriptor instead.
func (*RadarPosture) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *RadarPosture) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RadarPosture) GetData() *RadarUploadPostureEntity {
	if x != nil {
		return x.Data
	}
	return nil
}

type RadarBeamSteerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *RadarUploadBeamConfigEntity `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RadarBeamSteerConfig) Reset() {
	*x = RadarBeamSteerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarBeamSteerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarBeamSteerConfig) ProtoMessage() {}

func (x *RadarBeamSteerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarBeamSteerConfig.ProtoReflect.Descriptor instead.
func (*RadarBeamSteerConfig) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *RadarBeamSteerConfig) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RadarBeamSteerConfig) GetData() *RadarUploadBeamConfigEntity {
	if x != nil {
		return x.Data
	}
	return nil
}

type OtaFileDownloadStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *OtaFileDownloadStatus     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OtaFileDownloadStatusInfo) Reset() {
	*x = OtaFileDownloadStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFileDownloadStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFileDownloadStatusInfo) ProtoMessage() {}

func (x *OtaFileDownloadStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFileDownloadStatusInfo.ProtoReflect.Descriptor instead.
func (*OtaFileDownloadStatusInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *OtaFileDownloadStatusInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *OtaFileDownloadStatusInfo) GetData() *OtaFileDownloadStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpgradeStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *UpgradeStatus             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpgradeStatusInfo) Reset() {
	*x = UpgradeStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStatusInfo) ProtoMessage() {}

func (x *UpgradeStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStatusInfo.ProtoReflect.Descriptor instead.
func (*UpgradeStatusInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

func (x *UpgradeStatusInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpgradeStatusInfo) GetData() *UpgradeStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScreenHeartBeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *ScreenHeartBeatEntity     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScreenHeartBeatInfo) Reset() {
	*x = ScreenHeartBeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenHeartBeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenHeartBeatInfo) ProtoMessage() {}

func (x *ScreenHeartBeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenHeartBeatInfo.ProtoReflect.Descriptor instead.
func (*ScreenHeartBeatInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *ScreenHeartBeatInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScreenHeartBeatInfo) GetData() *ScreenHeartBeatEntity {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScreenHitStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *ScreenHitStatusEntity     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScreenHitStatusInfo) Reset() {
	*x = ScreenHitStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenHitStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenHitStatusInfo) ProtoMessage() {}

func (x *ScreenHitStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenHitStatusInfo.ProtoReflect.Descriptor instead.
func (*ScreenHitStatusInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *ScreenHitStatusInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScreenHitStatusInfo) GetData() *ScreenHitStatusEntity {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScreenHitResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*HitResult               `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ScreenHitResultInfo) Reset() {
	*x = ScreenHitResultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenHitResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenHitResultInfo) ProtoMessage() {}

func (x *ScreenHitResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenHitResultInfo.ProtoReflect.Descriptor instead.
func (*ScreenHitResultInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *ScreenHitResultInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScreenHitResultInfo) GetData() []*HitResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetRadarConnReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *SetRadarConnReq           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SetRadarConnReqInfo) Reset() {
	*x = SetRadarConnReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRadarConnReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRadarConnReqInfo) ProtoMessage() {}

func (x *SetRadarConnReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRadarConnReqInfo.ProtoReflect.Descriptor instead.
func (*SetRadarConnReqInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{15}
}

func (x *SetRadarConnReqInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetRadarConnReqInfo) GetData() *SetRadarConnReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type RadarFuseLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*RadarFuseLevel          `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RadarFuseLevelInfo) Reset() {
	*x = RadarFuseLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarFuseLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarFuseLevelInfo) ProtoMessage() {}

func (x *RadarFuseLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarFuseLevelInfo.ProtoReflect.Descriptor instead.
func (*RadarFuseLevelInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{16}
}

func (x *RadarFuseLevelInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RadarFuseLevelInfo) GetData() []*RadarFuseLevel {
	if x != nil {
		return x.Data
	}
	return nil
}

type SpooferStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *SpooferStatus             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SpooferStatusInfo) Reset() {
	*x = SpooferStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpooferStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpooferStatusInfo) ProtoMessage() {}

func (x *SpooferStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpooferStatusInfo.ProtoReflect.Descriptor instead.
func (*SpooferStatusInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{17}
}

func (x *SpooferStatusInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SpooferStatusInfo) GetData() *SpooferStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

//哨兵塔侦测到的无人机消息
type SflDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GimbalCounterDetectSocketInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SflDetectInfo) Reset() {
	*x = SflDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SflDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SflDetectInfo) ProtoMessage() {}

func (x *SflDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SflDetectInfo.ProtoReflect.Descriptor instead.
func (*SflDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{18}
}

func (x *SflDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SflDetectInfo) GetData() *GimbalCounterDetectSocketInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

//哨兵塔发过来的心跳消息
type SflHeartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GimbalCounterHeartInfo    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SflHeartInfo) Reset() {
	*x = SflHeartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SflHeartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SflHeartInfo) ProtoMessage() {}

func (x *SflHeartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SflHeartInfo.ProtoReflect.Descriptor instead.
func (*SflHeartInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{19}
}

func (x *SflHeartInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SflHeartInfo) GetData() *GimbalCounterHeartInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

//哨兵塔发过来的打击无人机的信息
type SflHitStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GimbalCounterHitSocketInfo `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SflHitStateInfo) Reset() {
	*x = SflHitStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SflHitStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SflHitStateInfo) ProtoMessage() {}

func (x *SflHitStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SflHitStateInfo.ProtoReflect.Descriptor instead.
func (*SflHitStateInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{20}
}

func (x *SflHitStateInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SflHitStateInfo) GetData() *GimbalCounterHitSocketInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

//车载FPV心跳上报消息
type FpvHeartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *FpvHeartInfoReport        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FpvHeartInfo) Reset() {
	*x = FpvHeartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvHeartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvHeartInfo) ProtoMessage() {}

func (x *FpvHeartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvHeartInfo.ProtoReflect.Descriptor instead.
func (*FpvHeartInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{21}
}

func (x *FpvHeartInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FpvHeartInfo) GetData() *FpvHeartInfoReport {
	if x != nil {
		return x.Data
	}
	return nil
}

//车载FPV打击状态上报
type FpvHitStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *FpvHitStateInfoReport     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FpvHitStateInfo) Reset() {
	*x = FpvHitStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvHitStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvHitStateInfo) ProtoMessage() {}

func (x *FpvHitStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvHitStateInfo.ProtoReflect.Descriptor instead.
func (*FpvHitStateInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{22}
}

func (x *FpvHitStateInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FpvHitStateInfo) GetData() *FpvHitStateInfoReport {
	if x != nil {
		return x.Data
	}
	return nil
}

//车载FPV侦测消息上报
type FpvDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *FpvDetectInfoReport       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FpvDetectInfo) Reset() {
	*x = FpvDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvDetectInfo) ProtoMessage() {}

func (x *FpvDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvDetectInfo.ProtoReflect.Descriptor instead.
func (*FpvDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{23}
}

func (x *FpvDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FpvDetectInfo) GetData() *FpvDetectInfoReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type FpvVideoStreams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *FpvVideoStreamItem        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FpvVideoStreams) Reset() {
	*x = FpvVideoStreams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvVideoStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvVideoStreams) ProtoMessage() {}

func (x *FpvVideoStreams) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvVideoStreams.ProtoReflect.Descriptor instead.
func (*FpvVideoStreams) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{24}
}

func (x *FpvVideoStreams) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FpvVideoStreams) GetData() *FpvVideoStreamItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxHeartBeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *AgxHeartBeatReport        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AgxHeartBeatInfo) Reset() {
	*x = AgxHeartBeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxHeartBeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxHeartBeatInfo) ProtoMessage() {}

func (x *AgxHeartBeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxHeartBeatInfo.ProtoReflect.Descriptor instead.
func (*AgxHeartBeatInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{25}
}

func (x *AgxHeartBeatInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AgxHeartBeatInfo) GetData() *AgxHeartBeatReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxPerceptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *AgxPerceptionReport       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AgxPerceptionInfo) Reset() {
	*x = AgxPerceptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxPerceptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxPerceptionInfo) ProtoMessage() {}

func (x *AgxPerceptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxPerceptionInfo.ProtoReflect.Descriptor instead.
func (*AgxPerceptionInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{26}
}

func (x *AgxPerceptionInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AgxPerceptionInfo) GetData() *AgxPerceptionReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*AgxDetectInfoList       `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AgxDetectInfo) Reset() {
	*x = AgxDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxDetectInfo) ProtoMessage() {}

func (x *AgxDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxDetectInfo.ProtoReflect.Descriptor instead.
func (*AgxDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{27}
}

func (x *AgxDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AgxDetectInfo) GetData() []*AgxDetectInfoList {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxDevStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *AgxDevStateList           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AgxDevStateInfo) Reset() {
	*x = AgxDevStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxDevStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxDevStateInfo) ProtoMessage() {}

func (x *AgxDevStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxDevStateInfo.ProtoReflect.Descriptor instead.
func (*AgxDevStateInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{28}
}

func (x *AgxDevStateInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AgxDevStateInfo) GetData() *AgxDevStateList {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxPTZStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *AgxPTZStateList           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AgxPTZStateInfo) Reset() {
	*x = AgxPTZStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxPTZStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxPTZStateInfo) ProtoMessage() {}

func (x *AgxPTZStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxPTZStateInfo.ProtoReflect.Descriptor instead.
func (*AgxPTZStateInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{29}
}

func (x *AgxPTZStateInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AgxPTZStateInfo) GetData() *AgxPTZStateList {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxPTZCalibrationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *AgxCalibration            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AgxPTZCalibrationInfo) Reset() {
	*x = AgxPTZCalibrationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxPTZCalibrationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxPTZCalibrationInfo) ProtoMessage() {}

func (x *AgxPTZCalibrationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxPTZCalibrationInfo.ProtoReflect.Descriptor instead.
func (*AgxPTZCalibrationInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{30}
}

func (x *AgxPTZCalibrationInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AgxPTZCalibrationInfo) GetData() *AgxCalibration {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag         int32   `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	AzimuthOff   float32 `protobuf:"fixed32,2,opt,name=azimuthOff,proto3" json:"azimuthOff,omitempty"`
	ElevationOff float32 `protobuf:"fixed32,3,opt,name=elevationOff,proto3" json:"elevationOff,omitempty"`
}

func (x *AgxCalibration) Reset() {
	*x = AgxCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxCalibration) ProtoMessage() {}

func (x *AgxCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxCalibration.ProtoReflect.Descriptor instead.
func (*AgxCalibration) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{31}
}

func (x *AgxCalibration) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *AgxCalibration) GetAzimuthOff() float32 {
	if x != nil {
		return x.AzimuthOff
	}
	return 0
}

func (x *AgxCalibration) GetElevationOff() float32 {
	if x != nil {
		return x.ElevationOff
	}
	return 0
}

type EquipmentMessageBoxEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sn        string `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	EquipType int32  `protobuf:"varint,3,opt,name=equipType,proto3" json:"equipType,omitempty"` //设备类型
	MsgType   int32  `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`     //消息类型
}

func (x *EquipmentMessageBoxEntity) Reset() {
	*x = EquipmentMessageBoxEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentMessageBoxEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentMessageBoxEntity) ProtoMessage() {}

func (x *EquipmentMessageBoxEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentMessageBoxEntity.ProtoReflect.Descriptor instead.
func (*EquipmentMessageBoxEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{32}
}

func (x *EquipmentMessageBoxEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentMessageBoxEntity) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *EquipmentMessageBoxEntity) GetEquipType() int32 {
	if x != nil {
		return x.EquipType
	}
	return 0
}

func (x *EquipmentMessageBoxEntity) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

type DbRawAutelRadarPlotTrackBodyEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId            uint32  `protobuf:"varint,1,opt,name=objId,proto3" json:"objId,omitempty"`
	HeaderUid        int64   `protobuf:"varint,2,opt,name=headerUid,proto3" json:"headerUid,omitempty"`
	Azimuth          float64 `protobuf:"fixed64,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	ObjDistInterpol  float64 `protobuf:"fixed64,4,opt,name=objDistInterpol,proto3" json:"objDistInterpol,omitempty"`
	Elevation        float64 `protobuf:"fixed64,5,opt,name=elevation,proto3" json:"elevation,omitempty"`
	Velocity         float64 `protobuf:"fixed64,6,opt,name=velocity,proto3" json:"velocity,omitempty"`
	DopplerChn       int32   `protobuf:"varint,7,opt,name=dopplerChn,proto3" json:"dopplerChn,omitempty"`
	Mag              float64 `protobuf:"fixed64,8,opt,name=mag,proto3" json:"mag,omitempty"`
	Ambiguous        int32   `protobuf:"varint,9,opt,name=ambiguous,proto3" json:"ambiguous,omitempty"`
	Classification   int32   `protobuf:"varint,10,opt,name=classification,proto3" json:"classification,omitempty"`
	ClassfyProb      float64 `protobuf:"fixed64,11,opt,name=classfyProb,proto3" json:"classfyProb,omitempty"`
	ExistingProb     float32 `protobuf:"fixed32,12,opt,name=existingProb,proto3" json:"existingProb,omitempty"`
	AbsVel           float64 `protobuf:"fixed64,13,opt,name=absVel,proto3" json:"absVel,omitempty"`
	OrientationAngle float64 `protobuf:"fixed64,14,opt,name=orientationAngle,proto3" json:"orientationAngle,omitempty"`
	Alive            uint32  `protobuf:"varint,15,opt,name=alive,proto3" json:"alive,omitempty"`
	TwsTasFlag       uint32  `protobuf:"varint,16,opt,name=twsTasFlag,proto3" json:"twsTasFlag,omitempty"`
	X                float64 `protobuf:"fixed64,17,opt,name=x,proto3" json:"x,omitempty"`
	Y                float64 `protobuf:"fixed64,18,opt,name=y,proto3" json:"y,omitempty"`
	Z                float64 `protobuf:"fixed64,19,opt,name=z,proto3" json:"z,omitempty"`
	Vx               float64 `protobuf:"fixed64,20,opt,name=vx,proto3" json:"vx,omitempty"`
	Vy               float64 `protobuf:"fixed64,21,opt,name=vy,proto3" json:"vy,omitempty"`
	Vz               float64 `protobuf:"fixed64,22,opt,name=vz,proto3" json:"vz,omitempty"`
	Ax               float64 `protobuf:"fixed64,23,opt,name=ax,proto3" json:"ax,omitempty"`
	Ay               float64 `protobuf:"fixed64,24,opt,name=ay,proto3" json:"ay,omitempty"`
	Az               float64 `protobuf:"fixed64,25,opt,name=az,proto3" json:"az,omitempty"`
	XVariance        float64 `protobuf:"fixed64,26,opt,name=xVariance,proto3" json:"xVariance,omitempty"`
	YVariance        float64 `protobuf:"fixed64,27,opt,name=yVariance,proto3" json:"yVariance,omitempty"`
	ZVariance        float64 `protobuf:"fixed64,28,opt,name=zVariance,proto3" json:"zVariance,omitempty"`
	VxVariance       float64 `protobuf:"fixed64,29,opt,name=vxVariance,proto3" json:"vxVariance,omitempty"`
	VyVariance       float64 `protobuf:"fixed64,30,opt,name=vyVariance,proto3" json:"vyVariance,omitempty"`
	VzVariance       float64 `protobuf:"fixed64,31,opt,name=vzVariance,proto3" json:"vzVariance,omitempty"`
	AxVariance       float64 `protobuf:"fixed64,32,opt,name=axVariance,proto3" json:"axVariance,omitempty"`
	AyVariance       float64 `protobuf:"fixed64,33,opt,name=ayVariance,proto3" json:"ayVariance,omitempty"`
	AzVariance       float64 `protobuf:"fixed64,34,opt,name=azVariance,proto3" json:"azVariance,omitempty"`
	StateType        int32   `protobuf:"varint,35,opt,name=stateType,proto3" json:"stateType,omitempty"`
	MotionType       int32   `protobuf:"varint,36,opt,name=motionType,proto3" json:"motionType,omitempty"`
	ForcastFrameNum  int32   `protobuf:"varint,37,opt,name=forcastFrameNum,proto3" json:"forcastFrameNum,omitempty"`
	AssociationNum   int32   `protobuf:"varint,38,opt,name=associationNum,proto3" json:"associationNum,omitempty"`
	AssocBit0        uint32  `protobuf:"varint,39,opt,name=assocBit0,proto3" json:"assocBit0,omitempty"`
	AssocBit1        uint32  `protobuf:"varint,40,opt,name=assocBit1,proto3" json:"assocBit1,omitempty"`
	Reserve          uint32  `protobuf:"varint,41,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Reserved2        uint32  `protobuf:"varint,42,opt,name=reserved2,proto3" json:"reserved2,omitempty"`
	Crc              uint32  `protobuf:"varint,43,opt,name=crc,proto3" json:"crc,omitempty"`
	CreateTime       string  `protobuf:"bytes,44,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Vendor           string  `protobuf:"bytes,45,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Frequency        string  `protobuf:"bytes,46,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Model            string  `protobuf:"bytes,47,opt,name=model,proto3" json:"model,omitempty"`
	IsWhitelist      bool    `protobuf:"varint,48,opt,name=isWhitelist,proto3" json:"isWhitelist,omitempty"`
	Level            int32   `protobuf:"varint,49,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) Reset() {
	*x = DbRawAutelRadarPlotTrackBodyEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbRawAutelRadarPlotTrackBodyEntity) ProtoMessage() {}

func (x *DbRawAutelRadarPlotTrackBodyEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbRawAutelRadarPlotTrackBodyEntity.ProtoReflect.Descriptor instead.
func (*DbRawAutelRadarPlotTrackBodyEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{33}
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetObjId() uint32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetHeaderUid() int64 {
	if x != nil {
		return x.HeaderUid
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetObjDistInterpol() float64 {
	if x != nil {
		return x.ObjDistInterpol
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVelocity() float64 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetDopplerChn() int32 {
	if x != nil {
		return x.DopplerChn
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetMag() float64 {
	if x != nil {
		return x.Mag
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAmbiguous() int32 {
	if x != nil {
		return x.Ambiguous
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetClassification() int32 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetClassfyProb() float64 {
	if x != nil {
		return x.ClassfyProb
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetExistingProb() float32 {
	if x != nil {
		return x.ExistingProb
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAbsVel() float64 {
	if x != nil {
		return x.AbsVel
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetOrientationAngle() float64 {
	if x != nil {
		return x.OrientationAngle
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAlive() uint32 {
	if x != nil {
		return x.Alive
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetTwsTasFlag() uint32 {
	if x != nil {
		return x.TwsTasFlag
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVx() float64 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVy() float64 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVz() float64 {
	if x != nil {
		return x.Vz
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAx() float64 {
	if x != nil {
		return x.Ax
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAy() float64 {
	if x != nil {
		return x.Ay
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAz() float64 {
	if x != nil {
		return x.Az
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetXVariance() float64 {
	if x != nil {
		return x.XVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetYVariance() float64 {
	if x != nil {
		return x.YVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetZVariance() float64 {
	if x != nil {
		return x.ZVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVxVariance() float64 {
	if x != nil {
		return x.VxVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVyVariance() float64 {
	if x != nil {
		return x.VyVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVzVariance() float64 {
	if x != nil {
		return x.VzVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAxVariance() float64 {
	if x != nil {
		return x.AxVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAyVariance() float64 {
	if x != nil {
		return x.AyVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAzVariance() float64 {
	if x != nil {
		return x.AzVariance
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetStateType() int32 {
	if x != nil {
		return x.StateType
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetMotionType() int32 {
	if x != nil {
		return x.MotionType
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetForcastFrameNum() int32 {
	if x != nil {
		return x.ForcastFrameNum
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAssociationNum() int32 {
	if x != nil {
		return x.AssociationNum
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAssocBit0() uint32 {
	if x != nil {
		return x.AssocBit0
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetAssocBit1() uint32 {
	if x != nil {
		return x.AssocBit1
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetReserve() uint32 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetReserved2() uint32 {
	if x != nil {
		return x.Reserved2
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetIsWhitelist() bool {
	if x != nil {
		return x.IsWhitelist
	}
	return false
}

func (x *DbRawAutelRadarPlotTrackBodyEntity) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type RadarStatusEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Electricity int32    `protobuf:"varint,1,opt,name=electricity,proto3" json:"electricity,omitempty"`
	Status      int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	IsOnline    int32    `protobuf:"varint,3,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	Ip          string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	SerialNum   string   `protobuf:"bytes,5,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	Faults      []string `protobuf:"bytes,6,rep,name=faults,proto3" json:"faults,omitempty"`
}

func (x *RadarStatusEntity) Reset() {
	*x = RadarStatusEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarStatusEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarStatusEntity) ProtoMessage() {}

func (x *RadarStatusEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarStatusEntity.ProtoReflect.Descriptor instead.
func (*RadarStatusEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{34}
}

func (x *RadarStatusEntity) GetElectricity() int32 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *RadarStatusEntity) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RadarStatusEntity) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *RadarStatusEntity) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RadarStatusEntity) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *RadarStatusEntity) GetFaults() []string {
	if x != nil {
		return x.Faults
	}
	return nil
}

type DroneIDReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp     uint32 `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Electricity   uint32 `protobuf:"varint,2,opt,name=electricity,proto3" json:"electricity,omitempty"`
	Sn            string `protobuf:"bytes,3,opt,name=sn,proto3" json:"sn,omitempty"`
	IsOnline      int32  `protobuf:"varint,4,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	BatteryStatus int32  `protobuf:"varint,5,opt,name=batteryStatus,proto3" json:"batteryStatus,omitempty"` // 0：电池 1：电池 + 适配器（充电） 2：适配器
	WorkMode      int32  `protobuf:"varint,6,opt,name=workMode,proto3" json:"workMode,omitempty"`           //工作模式 1:Droneid模式  2:全向侦测模式  3:定向侦测模式
	WorkStatus    int32  `protobuf:"varint,7,opt,name=workStatus,proto3" json:"workStatus,omitempty"`       // TRACER工作状态 bit0~bit3: 0：待机 1: 侦测
	// 5：水平扫描中 6：水平瞄准中 7：俯仰扫描中
	// 8：俯仰瞄准中 9：瞄准完成 bit4: 0: 没有故障 1：有故障
	Fault         int32 `protobuf:"varint,8,opt,name=fault,proto3" json:"fault,omitempty"`                  // 0:没有故障   1有故障   2其他故障依次添加
	AlarmLevel    int32 `protobuf:"varint,9,opt,name=alarmLevel,proto3" json:"alarmLevel,omitempty"`        //告警
	BuzzerOn      int32 `protobuf:"varint,10,opt,name=buzzerOn,proto3" json:"buzzerOn,omitempty"`           //蜂鸣器
	VibrationOn   int32 `protobuf:"varint,11,opt,name=vibrationOn,proto3" json:"vibrationOn,omitempty"`     //马达
	StealthModeOn int32 `protobuf:"varint,12,opt,name=stealthModeOn,proto3" json:"stealthModeOn,omitempty"` //隐蔽模式
}

func (x *DroneIDReport) Reset() {
	*x = DroneIDReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DroneIDReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DroneIDReport) ProtoMessage() {}

func (x *DroneIDReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DroneIDReport.ProtoReflect.Descriptor instead.
func (*DroneIDReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{35}
}

func (x *DroneIDReport) GetTimeStamp() uint32 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *DroneIDReport) GetElectricity() uint32 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *DroneIDReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DroneIDReport) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *DroneIDReport) GetBatteryStatus() int32 {
	if x != nil {
		return x.BatteryStatus
	}
	return 0
}

func (x *DroneIDReport) GetWorkMode() int32 {
	if x != nil {
		return x.WorkMode
	}
	return 0
}

func (x *DroneIDReport) GetWorkStatus() int32 {
	if x != nil {
		return x.WorkStatus
	}
	return 0
}

func (x *DroneIDReport) GetFault() int32 {
	if x != nil {
		return x.Fault
	}
	return 0
}

func (x *DroneIDReport) GetAlarmLevel() int32 {
	if x != nil {
		return x.AlarmLevel
	}
	return 0
}

func (x *DroneIDReport) GetBuzzerOn() int32 {
	if x != nil {
		return x.BuzzerOn
	}
	return 0
}

func (x *DroneIDReport) GetVibrationOn() int32 {
	if x != nil {
		return x.VibrationOn
	}
	return 0
}

func (x *DroneIDReport) GetStealthModeOn() int32 {
	if x != nil {
		return x.StealthModeOn
	}
	return 0
}

// Tracer侦测数据
type TracerDetectReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   string                     `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Info []*TracerDetectDescription `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *TracerDetectReport) Reset() {
	*x = TracerDetectReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerDetectReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerDetectReport) ProtoMessage() {}

func (x *TracerDetectReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerDetectReport.ProtoReflect.Descriptor instead.
func (*TracerDetectReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{36}
}

func (x *TracerDetectReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *TracerDetectReport) GetInfo() []*TracerDetectDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type TracerDetectDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductType        int32   `protobuf:"varint,1,opt,name=productType,proto3" json:"productType,omitempty"`                //无人机类型
	DroneName          string  `protobuf:"bytes,2,opt,name=droneName,proto3" json:"droneName,omitempty"`                     //无人机品牌+机型
	SerialNum          string  `protobuf:"bytes,3,opt,name=serialNum,proto3" json:"serialNum,omitempty"`                     //无人机Sn码
	DroneLongitude     float64 `protobuf:"fixed64,4,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`         //经度
	DroneLatitude      float64 `protobuf:"fixed64,5,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`           //纬度
	DroneHeight        float64 `protobuf:"fixed64,6,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`               //高度
	DroneYawAngle      float64 `protobuf:"fixed64,7,opt,name=droneYawAngle,proto3" json:"droneYawAngle,omitempty"`           //偏航角
	DroneSpeed         float64 `protobuf:"fixed64,8,opt,name=droneSpeed,proto3" json:"droneSpeed,omitempty"`                 //速度
	DroneVerticalSpeed float64 `protobuf:"fixed64,9,opt,name=droneVerticalSpeed,proto3" json:"droneVerticalSpeed,omitempty"` //垂直速度
	OperatorLongitude  float64 `protobuf:"fixed64,10,opt,name=operatorLongitude,proto3" json:"operatorLongitude,omitempty"`  //飞手经度
	OperatorLatitude   float64 `protobuf:"fixed64,11,opt,name=operatorLatitude,proto3" json:"operatorLatitude,omitempty"`    //飞手纬度
	Freq               float64 `protobuf:"fixed64,12,opt,name=freq,proto3" json:"freq,omitempty"`                            //频率
	Distance           int32   `protobuf:"varint,13,opt,name=distance,proto3" json:"distance,omitempty"`                     //距离
	DangerLevels       int32   `protobuf:"varint,14,opt,name=dangerLevels,proto3" json:"dangerLevels,omitempty"`             //危险等级
	Role               int32   `protobuf:"varint,15,opt,name=role,proto3" json:"role,omitempty"`                             //无人机角色
}

func (x *TracerDetectDescription) Reset() {
	*x = TracerDetectDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerDetectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerDetectDescription) ProtoMessage() {}

func (x *TracerDetectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerDetectDescription.ProtoReflect.Descriptor instead.
func (*TracerDetectDescription) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{37}
}

func (x *TracerDetectDescription) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *TracerDetectDescription) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *TracerDetectDescription) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *TracerDetectDescription) GetDroneLongitude() float64 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *TracerDetectDescription) GetDroneLatitude() float64 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *TracerDetectDescription) GetDroneHeight() float64 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

func (x *TracerDetectDescription) GetDroneYawAngle() float64 {
	if x != nil {
		return x.DroneYawAngle
	}
	return 0
}

func (x *TracerDetectDescription) GetDroneSpeed() float64 {
	if x != nil {
		return x.DroneSpeed
	}
	return 0
}

func (x *TracerDetectDescription) GetDroneVerticalSpeed() float64 {
	if x != nil {
		return x.DroneVerticalSpeed
	}
	return 0
}

func (x *TracerDetectDescription) GetOperatorLongitude() float64 {
	if x != nil {
		return x.OperatorLongitude
	}
	return 0
}

func (x *TracerDetectDescription) GetOperatorLatitude() float64 {
	if x != nil {
		return x.OperatorLatitude
	}
	return 0
}

func (x *TracerDetectDescription) GetFreq() float64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *TracerDetectDescription) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *TracerDetectDescription) GetDangerLevels() int32 {
	if x != nil {
		return x.DangerLevels
	}
	return 0
}

func (x *TracerDetectDescription) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

// TracerRemote侦测数据
type TracerRemoteDetectReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   string                           `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Info []*TracerRemoteDetectDescription `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *TracerRemoteDetectReport) Reset() {
	*x = TracerRemoteDetectReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerRemoteDetectReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerRemoteDetectReport) ProtoMessage() {}

func (x *TracerRemoteDetectReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerRemoteDetectReport.ProtoReflect.Descriptor instead.
func (*TracerRemoteDetectReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{38}
}

func (x *TracerRemoteDetectReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *TracerRemoteDetectReport) GetInfo() []*TracerRemoteDetectDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type TracerRemoteDetectDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductType         int32   `protobuf:"varint,1,opt,name=productType,proto3" json:"productType,omitempty"`                  //无人机类型
	DroneName           string  `protobuf:"bytes,2,opt,name=droneName,proto3" json:"droneName,omitempty"`                       //无人机品牌+机型
	SerialNum           string  `protobuf:"bytes,3,opt,name=serialNum,proto3" json:"serialNum,omitempty"`                       //无人机Sn码
	DroneLongitude      float64 `protobuf:"fixed64,4,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`           //经度
	DroneLatitude       float64 `protobuf:"fixed64,5,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`             //纬度
	DroneHeight         float64 `protobuf:"fixed64,6,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`                 //高度
	DroneDirection      float64 `protobuf:"fixed64,7,opt,name=droneDirection,proto3" json:"droneDirection,omitempty"`           //无人机角度
	DroneYawAngle       float64 `protobuf:"fixed64,8,opt,name=droneYawAngle,proto3" json:"droneYawAngle,omitempty"`             //偏航角
	DroneSpeed          float64 `protobuf:"fixed64,9,opt,name=droneSpeed,proto3" json:"droneSpeed,omitempty"`                   //速度
	DroneSpeedderection int32   `protobuf:"varint,10,opt,name=droneSpeedderection,proto3" json:"droneSpeedderection,omitempty"` // 0:无人机向前 1:向后  2:向左  3:向右 4:垂直
	DroneVerticalSpeed  float64 `protobuf:"fixed64,11,opt,name=droneVerticalSpeed,proto3" json:"droneVerticalSpeed,omitempty"`  //垂直速度
	OperatorLongitude   float64 `protobuf:"fixed64,12,opt,name=operatorLongitude,proto3" json:"operatorLongitude,omitempty"`    //飞手经度
	OperatorLatitude    float64 `protobuf:"fixed64,13,opt,name=operatorLatitude,proto3" json:"operatorLatitude,omitempty"`      //飞手纬度
	Freq                float64 `protobuf:"fixed64,14,opt,name=freq,proto3" json:"freq,omitempty"`                              //频率
	Distance            int32   `protobuf:"varint,15,opt,name=distance,proto3" json:"distance,omitempty"`                       //距离
	DangerLevels        int32   `protobuf:"varint,16,opt,name=dangerLevels,proto3" json:"dangerLevels,omitempty"`               //危险等级
	Role                int32   `protobuf:"varint,17,opt,name=role,proto3" json:"role,omitempty"`                               //无人机角色
}

func (x *TracerRemoteDetectDescription) Reset() {
	*x = TracerRemoteDetectDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerRemoteDetectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerRemoteDetectDescription) ProtoMessage() {}

func (x *TracerRemoteDetectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerRemoteDetectDescription.ProtoReflect.Descriptor instead.
func (*TracerRemoteDetectDescription) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{39}
}

func (x *TracerRemoteDetectDescription) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *TracerRemoteDetectDescription) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *TracerRemoteDetectDescription) GetDroneLongitude() float64 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneLatitude() float64 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneHeight() float64 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneDirection() float64 {
	if x != nil {
		return x.DroneDirection
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneYawAngle() float64 {
	if x != nil {
		return x.DroneYawAngle
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneSpeed() float64 {
	if x != nil {
		return x.DroneSpeed
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneSpeedderection() int32 {
	if x != nil {
		return x.DroneSpeedderection
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDroneVerticalSpeed() float64 {
	if x != nil {
		return x.DroneVerticalSpeed
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetOperatorLongitude() float64 {
	if x != nil {
		return x.OperatorLongitude
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetOperatorLatitude() float64 {
	if x != nil {
		return x.OperatorLatitude
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetFreq() float64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetDangerLevels() int32 {
	if x != nil {
		return x.DangerLevels
	}
	return 0
}

func (x *TracerRemoteDetectDescription) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

// TracerFreq侦测数据
type TracerFreqDetectReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn        string                         `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	QxPower   float64                        `protobuf:"fixed64,2,opt,name=qxPower,proto3" json:"qxPower,omitempty"`     //全向功率
	DxPower   float64                        `protobuf:"fixed64,3,opt,name=dxPower,proto3" json:"dxPower,omitempty"`     //定向功率
	DxHorizon float64                        `protobuf:"fixed64,4,opt,name=dxHorizon,proto3" json:"dxHorizon,omitempty"` //定向天线水平角(0.01°)
	Info      []*TracerFreqDetectDescription `protobuf:"bytes,5,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *TracerFreqDetectReport) Reset() {
	*x = TracerFreqDetectReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerFreqDetectReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerFreqDetectReport) ProtoMessage() {}

func (x *TracerFreqDetectReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerFreqDetectReport.ProtoReflect.Descriptor instead.
func (*TracerFreqDetectReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{40}
}

func (x *TracerFreqDetectReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *TracerFreqDetectReport) GetQxPower() float64 {
	if x != nil {
		return x.QxPower
	}
	return 0
}

func (x *TracerFreqDetectReport) GetDxPower() float64 {
	if x != nil {
		return x.DxPower
	}
	return 0
}

func (x *TracerFreqDetectReport) GetDxHorizon() float64 {
	if x != nil {
		return x.DxHorizon
	}
	return 0
}

func (x *TracerFreqDetectReport) GetInfo() []*TracerFreqDetectDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type TracerFreqDetectDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UavNumber     int32   `protobuf:"varint,1,opt,name=uavNumber,proto3" json:"uavNumber,omitempty"`         //无人机编号
	DroneName     string  `protobuf:"bytes,2,opt,name=droneName,proto3" json:"droneName,omitempty"`          //无人机品牌+机型
	DroneHorizon  float64 `protobuf:"fixed64,3,opt,name=droneHorizon,proto3" json:"droneHorizon,omitempty"`  // lsb 目标水平角（0.01°），无效值0x7fffffff
	UFreq         float64 `protobuf:"fixed64,4,opt,name=uFreq,proto3" json:"uFreq,omitempty"`                //频率
	UDangerLevels int32   `protobuf:"varint,5,opt,name=uDangerLevels,proto3" json:"uDangerLevels,omitempty"` //危险等级
	Recerve       int32   `protobuf:"varint,6,opt,name=recerve,proto3" json:"recerve,omitempty"`             //保留
}

func (x *TracerFreqDetectDescription) Reset() {
	*x = TracerFreqDetectDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerFreqDetectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerFreqDetectDescription) ProtoMessage() {}

func (x *TracerFreqDetectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerFreqDetectDescription.ProtoReflect.Descriptor instead.
func (*TracerFreqDetectDescription) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{41}
}

func (x *TracerFreqDetectDescription) GetUavNumber() int32 {
	if x != nil {
		return x.UavNumber
	}
	return 0
}

func (x *TracerFreqDetectDescription) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *TracerFreqDetectDescription) GetDroneHorizon() float64 {
	if x != nil {
		return x.DroneHorizon
	}
	return 0
}

func (x *TracerFreqDetectDescription) GetUFreq() float64 {
	if x != nil {
		return x.UFreq
	}
	return 0
}

func (x *TracerFreqDetectDescription) GetUDangerLevels() int32 {
	if x != nil {
		return x.UDangerLevels
	}
	return 0
}

func (x *TracerFreqDetectDescription) GetRecerve() int32 {
	if x != nil {
		return x.Recerve
	}
	return 0
}

// TracerFreqData 上报频谱数据
type TracerSFreqDataReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn      string                        `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	FreqNum int32                         `protobuf:"varint,2,opt,name=freqNum,proto3" json:"freqNum,omitempty"` //频点总数
	Info    []*TracerSFreqDataDescription `protobuf:"bytes,3,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *TracerSFreqDataReport) Reset() {
	*x = TracerSFreqDataReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerSFreqDataReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerSFreqDataReport) ProtoMessage() {}

func (x *TracerSFreqDataReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerSFreqDataReport.ProtoReflect.Descriptor instead.
func (*TracerSFreqDataReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{42}
}

func (x *TracerSFreqDataReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *TracerSFreqDataReport) GetFreqNum() int32 {
	if x != nil {
		return x.FreqNum
	}
	return 0
}

func (x *TracerSFreqDataReport) GetInfo() []*TracerSFreqDataDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type TracerSFreqDataDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmpValue float32 `protobuf:"fixed32,1,opt,name=ampValue,proto3" json:"ampValue,omitempty"`
}

func (x *TracerSFreqDataDescription) Reset() {
	*x = TracerSFreqDataDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerSFreqDataDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerSFreqDataDescription) ProtoMessage() {}

func (x *TracerSFreqDataDescription) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerSFreqDataDescription.ProtoReflect.Descriptor instead.
func (*TracerSFreqDataDescription) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{43}
}

func (x *TracerSFreqDataDescription) GetAmpValue() float32 {
	if x != nil {
		return x.AmpValue
	}
	return 0
}

type ScreenHeartBeatEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HeaderId       int64                   `protobuf:"varint,2,opt,name=headerId,proto3" json:"headerId,omitempty"`
	TimeStamp      uint32                  `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	ScreenStatus   uint32                  `protobuf:"varint,4,opt,name=screenStatus,proto3" json:"screenStatus,omitempty"`
	Electricity    uint32                  `protobuf:"varint,5,opt,name=electricity,proto3" json:"electricity,omitempty"`
	SignalStrength uint32                  `protobuf:"varint,6,opt,name=signalStrength,proto3" json:"signalStrength,omitempty"`
	WorkStatus     uint32                  `protobuf:"varint,7,opt,name=workStatus,proto3" json:"workStatus,omitempty"`
	AlarmLevel     uint32                  `protobuf:"varint,8,opt,name=alarmLevel,proto3" json:"alarmLevel,omitempty"`
	HitFreq        uint32                  `protobuf:"varint,9,opt,name=hitFreq,proto3" json:"hitFreq,omitempty"`
	DetectFreq     uint32                  `protobuf:"varint,10,opt,name=detectFreq,proto3" json:"detectFreq,omitempty"`
	X              uint32                  `protobuf:"varint,11,opt,name=x,proto3" json:"x,omitempty"`
	Y              uint32                  `protobuf:"varint,12,opt,name=y,proto3" json:"y,omitempty"`
	Z              uint32                  `protobuf:"varint,13,opt,name=z,proto3" json:"z,omitempty"`
	GunLongitude   float64                 `protobuf:"fixed64,14,opt,name=gunLongitude,proto3" json:"gunLongitude,omitempty"`
	GunLatitude    float64                 `protobuf:"fixed64,15,opt,name=gunLatitude,proto3" json:"gunLatitude,omitempty"`
	GunAltitude    int32                   `protobuf:"varint,16,opt,name=gunAltitude,proto3" json:"gunAltitude,omitempty"`
	SatellitesNum  uint32                  `protobuf:"varint,17,opt,name=satellitesNum,proto3" json:"satellitesNum,omitempty"`
	GunDirection   float64                 `protobuf:"fixed64,18,opt,name=gunDirection,proto3" json:"gunDirection,omitempty"`
	ReHitTime      uint32                  `protobuf:"varint,19,opt,name=reHitTime,proto3" json:"reHitTime,omitempty"`
	HitTime        uint32                  `protobuf:"varint,20,opt,name=hitTime,proto3" json:"hitTime,omitempty"`
	UDroneNum      uint32                  `protobuf:"varint,21,opt,name=uDroneNum,proto3" json:"uDroneNum,omitempty"`
	Elevation      float64                 `protobuf:"fixed64,22,opt,name=elevation,proto3" json:"elevation,omitempty"`
	IsOnline       int32                   `protobuf:"varint,23,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	Info           []*ScreenHeartUavEntity `protobuf:"bytes,24,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *ScreenHeartBeatEntity) Reset() {
	*x = ScreenHeartBeatEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenHeartBeatEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenHeartBeatEntity) ProtoMessage() {}

func (x *ScreenHeartBeatEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenHeartBeatEntity.ProtoReflect.Descriptor instead.
func (*ScreenHeartBeatEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{44}
}

func (x *ScreenHeartBeatEntity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetHeaderId() int64 {
	if x != nil {
		return x.HeaderId
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetTimeStamp() uint32 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetScreenStatus() uint32 {
	if x != nil {
		return x.ScreenStatus
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetElectricity() uint32 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetSignalStrength() uint32 {
	if x != nil {
		return x.SignalStrength
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetWorkStatus() uint32 {
	if x != nil {
		return x.WorkStatus
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetAlarmLevel() uint32 {
	if x != nil {
		return x.AlarmLevel
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetHitFreq() uint32 {
	if x != nil {
		return x.HitFreq
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetDetectFreq() uint32 {
	if x != nil {
		return x.DetectFreq
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetZ() uint32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetGunLongitude() float64 {
	if x != nil {
		return x.GunLongitude
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetGunLatitude() float64 {
	if x != nil {
		return x.GunLatitude
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetGunAltitude() int32 {
	if x != nil {
		return x.GunAltitude
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetSatellitesNum() uint32 {
	if x != nil {
		return x.SatellitesNum
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetGunDirection() float64 {
	if x != nil {
		return x.GunDirection
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetReHitTime() uint32 {
	if x != nil {
		return x.ReHitTime
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetHitTime() uint32 {
	if x != nil {
		return x.HitTime
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetUDroneNum() uint32 {
	if x != nil {
		return x.UDroneNum
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *ScreenHeartBeatEntity) GetInfo() []*ScreenHeartUavEntity {
	if x != nil {
		return x.Info
	}
	return nil
}

type ScreenHeartUavEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductType        int32   `protobuf:"varint,1,opt,name=productType,proto3" json:"productType,omitempty"`
	DroneName          string  `protobuf:"bytes,2,opt,name=droneName,proto3" json:"droneName,omitempty"`
	SerialNum          string  `protobuf:"bytes,3,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	DroneLongitude     float64 `protobuf:"fixed64,4,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`
	DroneLatitude      float64 `protobuf:"fixed64,5,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`
	DroneHeight        float64 `protobuf:"fixed64,6,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`
	DroneYawAngle      float64 `protobuf:"fixed64,7,opt,name=droneYawAngle,proto3" json:"droneYawAngle,omitempty"`
	DroneSpeed         float64 `protobuf:"fixed64,8,opt,name=droneSpeed,proto3" json:"droneSpeed,omitempty"`
	DroneVerticalSpeed float64 `protobuf:"fixed64,9,opt,name=droneVerticalSpeed,proto3" json:"droneVerticalSpeed,omitempty"`
	PilotLongitude     float64 `protobuf:"fixed64,10,opt,name=pilotLongitude,proto3" json:"pilotLongitude,omitempty"`
	PilotLatitude      float64 `protobuf:"fixed64,11,opt,name=pilotLatitude,proto3" json:"pilotLatitude,omitempty"`
	DroneHorizon       float64 `protobuf:"fixed64,12,opt,name=droneHorizon,proto3" json:"droneHorizon,omitempty"`
	DronePitch         float64 `protobuf:"fixed64,13,opt,name=dronePitch,proto3" json:"dronePitch,omitempty"`
	UFreq              float64 `protobuf:"fixed64,14,opt,name=uFreq,proto3" json:"uFreq,omitempty"`
	UDistance          int32   `protobuf:"varint,15,opt,name=uDistance,proto3" json:"uDistance,omitempty"`
	UDangerLevels      int32   `protobuf:"varint,16,opt,name=uDangerLevels,proto3" json:"uDangerLevels,omitempty"`
}

func (x *ScreenHeartUavEntity) Reset() {
	*x = ScreenHeartUavEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenHeartUavEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenHeartUavEntity) ProtoMessage() {}

func (x *ScreenHeartUavEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenHeartUavEntity.ProtoReflect.Descriptor instead.
func (*ScreenHeartUavEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{45}
}

func (x *ScreenHeartUavEntity) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *ScreenHeartUavEntity) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *ScreenHeartUavEntity) GetDroneLongitude() float64 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneLatitude() float64 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneHeight() float64 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneYawAngle() float64 {
	if x != nil {
		return x.DroneYawAngle
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneSpeed() float64 {
	if x != nil {
		return x.DroneSpeed
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneVerticalSpeed() float64 {
	if x != nil {
		return x.DroneVerticalSpeed
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetPilotLongitude() float64 {
	if x != nil {
		return x.PilotLongitude
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetPilotLatitude() float64 {
	if x != nil {
		return x.PilotLatitude
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDroneHorizon() float64 {
	if x != nil {
		return x.DroneHorizon
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetDronePitch() float64 {
	if x != nil {
		return x.DronePitch
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetUFreq() float64 {
	if x != nil {
		return x.UFreq
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetUDistance() int32 {
	if x != nil {
		return x.UDistance
	}
	return 0
}

func (x *ScreenHeartUavEntity) GetUDangerLevels() int32 {
	if x != nil {
		return x.UDangerLevels
	}
	return 0
}

type RadarUploadPostureEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved            uint32  `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Heading             float64 `protobuf:"fixed64,2,opt,name=heading,proto3" json:"heading,omitempty"`
	Pitching            float64 `protobuf:"fixed64,3,opt,name=pitching,proto3" json:"pitching,omitempty"`
	Rolling             float64 `protobuf:"fixed64,4,opt,name=rolling,proto3" json:"rolling,omitempty"`
	Longitude           float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude            float64 `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Altitude            float64 `protobuf:"fixed64,7,opt,name=altitude,proto3" json:"altitude,omitempty"`
	VelocityNavi        float64 `protobuf:"fixed64,8,opt,name=velocityNavi,proto3" json:"velocityNavi,omitempty"`
	SigProcRelativeTime float64 `protobuf:"fixed64,9,opt,name=sigProcRelativeTime,proto3" json:"sigProcRelativeTime,omitempty"`
}

func (x *RadarUploadPostureEntity) Reset() {
	*x = RadarUploadPostureEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarUploadPostureEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarUploadPostureEntity) ProtoMessage() {}

func (x *RadarUploadPostureEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarUploadPostureEntity.ProtoReflect.Descriptor instead.
func (*RadarUploadPostureEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{46}
}

func (x *RadarUploadPostureEntity) GetReserved() uint32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetPitching() float64 {
	if x != nil {
		return x.Pitching
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetRolling() float64 {
	if x != nil {
		return x.Rolling
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetVelocityNavi() float64 {
	if x != nil {
		return x.VelocityNavi
	}
	return 0
}

func (x *RadarUploadPostureEntity) GetSigProcRelativeTime() float64 {
	if x != nil {
		return x.SigProcRelativeTime
	}
	return 0
}

type RadarUploadBeamConfigEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AziScanCenter int32 `protobuf:"varint,1,opt,name=aziScanCenter,proto3" json:"aziScanCenter,omitempty"` //方位扫描中心， -60°～+60°，默认为0
	AziScanScope  int32 `protobuf:"varint,2,opt,name=aziScanScope,proto3" json:"aziScanScope,omitempty"`   //	方位扫描范围， 0、20、40、90、120，默认为120
	EleScanCenter int32 `protobuf:"varint,3,opt,name=eleScanCenter,proto3" json:"eleScanCenter,omitempty"` //俯仰扫描中心，-20°～+20°，默认为0
	EleScanScope  int32 `protobuf:"varint,4,opt,name=eleScanScope,proto3" json:"eleScanScope,omitempty"`   //	俯仰扫描范围，0、10、20、40，默认为40
}

func (x *RadarUploadBeamConfigEntity) Reset() {
	*x = RadarUploadBeamConfigEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarUploadBeamConfigEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarUploadBeamConfigEntity) ProtoMessage() {}

func (x *RadarUploadBeamConfigEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarUploadBeamConfigEntity.ProtoReflect.Descriptor instead.
func (*RadarUploadBeamConfigEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{47}
}

func (x *RadarUploadBeamConfigEntity) GetAziScanCenter() int32 {
	if x != nil {
		return x.AziScanCenter
	}
	return 0
}

func (x *RadarUploadBeamConfigEntity) GetAziScanScope() int32 {
	if x != nil {
		return x.AziScanScope
	}
	return 0
}

func (x *RadarUploadBeamConfigEntity) GetEleScanCenter() int32 {
	if x != nil {
		return x.EleScanCenter
	}
	return 0
}

func (x *RadarUploadBeamConfigEntity) GetEleScanScope() int32 {
	if x != nil {
		return x.EleScanScope
	}
	return 0
}

type OtaFileDownloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	DownloadedPercentage int32  `protobuf:"varint,2,opt,name=downloadedPercentage,proto3" json:"downloadedPercentage,omitempty"`
	FileName             string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	ErrMsg               string `protobuf:"bytes,4,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	FallPath             string `protobuf:"bytes,5,opt,name=fallPath,proto3" json:"fallPath,omitempty"`
}

func (x *OtaFileDownloadStatus) Reset() {
	*x = OtaFileDownloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFileDownloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFileDownloadStatus) ProtoMessage() {}

func (x *OtaFileDownloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFileDownloadStatus.ProtoReflect.Descriptor instead.
func (*OtaFileDownloadStatus) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{48}
}

func (x *OtaFileDownloadStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFileDownloadStatus) GetDownloadedPercentage() int32 {
	if x != nil {
		return x.DownloadedPercentage
	}
	return 0
}

func (x *OtaFileDownloadStatus) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OtaFileDownloadStatus) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *OtaFileDownloadStatus) GetFallPath() string {
	if x != nil {
		return x.FallPath
	}
	return ""
}

type UpgradeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn          string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	DeviceType  int32  `protobuf:"varint,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	Status      int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Permil      int64  `protobuf:"varint,4,opt,name=permil,proto3" json:"permil,omitempty"`
	PkgPathName string `protobuf:"bytes,5,opt,name=pkgPathName,proto3" json:"pkgPathName,omitempty"`
	ErrMsg      string `protobuf:"bytes,6,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *UpgradeStatus) Reset() {
	*x = UpgradeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStatus) ProtoMessage() {}

func (x *UpgradeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStatus.ProtoReflect.Descriptor instead.
func (*UpgradeStatus) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{49}
}

func (x *UpgradeStatus) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *UpgradeStatus) GetDeviceType() int32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *UpgradeStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpgradeStatus) GetPermil() int64 {
	if x != nil {
		return x.Permil
	}
	return 0
}

func (x *UpgradeStatus) GetPkgPathName() string {
	if x != nil {
		return x.PkgPathName
	}
	return ""
}

func (x *UpgradeStatus) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type HitUavEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId          uint32 `protobuf:"varint,1,opt,name=objId,proto3" json:"objId,omitempty"`
	ProductType    uint32 `protobuf:"varint,2,opt,name=productType,proto3" json:"productType,omitempty"`
	DroneName      string `protobuf:"bytes,3,opt,name=droneName,proto3" json:"droneName,omitempty"`
	SerialNum      string `protobuf:"bytes,4,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	DroneLongitude int32  `protobuf:"varint,5,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`
	DroneLatitude  int32  `protobuf:"varint,6,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`
	DroneHeight    int32  `protobuf:"varint,7,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`
}

func (x *HitUavEntity) Reset() {
	*x = HitUavEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitUavEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitUavEntity) ProtoMessage() {}

func (x *HitUavEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitUavEntity.ProtoReflect.Descriptor instead.
func (*HitUavEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{50}
}

func (x *HitUavEntity) GetObjId() uint32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *HitUavEntity) GetProductType() uint32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *HitUavEntity) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *HitUavEntity) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *HitUavEntity) GetDroneLongitude() int32 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *HitUavEntity) GetDroneLatitude() int32 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *HitUavEntity) GetDroneHeight() int32 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

type ScreenHitStatusEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkStatus uint32          `protobuf:"varint,1,opt,name=workStatus,proto3" json:"workStatus,omitempty"`
	DroneNum   uint32          `protobuf:"varint,2,opt,name=droneNum,proto3" json:"droneNum,omitempty"`
	Uavs       []*HitUavEntity `protobuf:"bytes,3,rep,name=uavs,proto3" json:"uavs,omitempty"`
}

func (x *ScreenHitStatusEntity) Reset() {
	*x = ScreenHitStatusEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenHitStatusEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenHitStatusEntity) ProtoMessage() {}

func (x *ScreenHitStatusEntity) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenHitStatusEntity.ProtoReflect.Descriptor instead.
func (*ScreenHitStatusEntity) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{51}
}

func (x *ScreenHitStatusEntity) GetWorkStatus() uint32 {
	if x != nil {
		return x.WorkStatus
	}
	return 0
}

func (x *ScreenHitStatusEntity) GetDroneNum() uint32 {
	if x != nil {
		return x.DroneNum
	}
	return 0
}

func (x *ScreenHitStatusEntity) GetUavs() []*HitUavEntity {
	if x != nil {
		return x.Uavs
	}
	return nil
}

type HitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId  uint32 `protobuf:"varint,1,opt,name=objId,proto3" json:"objId,omitempty"`
	Result uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *HitResult) Reset() {
	*x = HitResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitResult) ProtoMessage() {}

func (x *HitResult) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitResult.ProtoReflect.Descriptor instead.
func (*HitResult) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{52}
}

func (x *HitResult) GetObjId() uint32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *HitResult) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type SetRadarConnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn     string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetRadarConnReq) Reset() {
	*x = SetRadarConnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRadarConnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRadarConnReq) ProtoMessage() {}

func (x *SetRadarConnReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRadarConnReq.ProtoReflect.Descriptor instead.
func (*SetRadarConnReq) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{53}
}

func (x *SetRadarConnReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *SetRadarConnReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RadarFuseLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn    string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	ObjId uint32 `protobuf:"varint,2,opt,name=objId,proto3" json:"objId,omitempty"`
	Level int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *RadarFuseLevel) Reset() {
	*x = RadarFuseLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarFuseLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarFuseLevel) ProtoMessage() {}

func (x *RadarFuseLevel) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarFuseLevel.ProtoReflect.Descriptor instead.
func (*RadarFuseLevel) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{54}
}

func (x *RadarFuseLevel) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *RadarFuseLevel) GetObjId() uint32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *RadarFuseLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type SpooferStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOnline    int32   `protobuf:"varint,1,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	IsWorking   int32   `protobuf:"varint,2,opt,name=isWorking,proto3" json:"isWorking,omitempty"`
	GpsStatus   int32   `protobuf:"varint,3,opt,name=gpsStatus,proto3" json:"gpsStatus,omitempty"`
	Ephemeris   int32   `protobuf:"varint,4,opt,name=ephemeris,proto3" json:"ephemeris,omitempty"`
	TimeSync    int32   `protobuf:"varint,5,opt,name=timeSync,proto3" json:"timeSync,omitempty"`
	Longititude float64 `protobuf:"fixed64,6,opt,name=longititude,proto3" json:"longititude,omitempty"`
	Latitude    float64 `protobuf:"fixed64,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Height      float64 `protobuf:"fixed64,8,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *SpooferStatus) Reset() {
	*x = SpooferStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpooferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpooferStatus) ProtoMessage() {}

func (x *SpooferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpooferStatus.ProtoReflect.Descriptor instead.
func (*SpooferStatus) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{55}
}

func (x *SpooferStatus) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *SpooferStatus) GetIsWorking() int32 {
	if x != nil {
		return x.IsWorking
	}
	return 0
}

func (x *SpooferStatus) GetGpsStatus() int32 {
	if x != nil {
		return x.GpsStatus
	}
	return 0
}

func (x *SpooferStatus) GetEphemeris() int32 {
	if x != nil {
		return x.Ephemeris
	}
	return 0
}

func (x *SpooferStatus) GetTimeSync() int32 {
	if x != nil {
		return x.TimeSync
	}
	return 0
}

func (x *SpooferStatus) GetLongititude() float64 {
	if x != nil {
		return x.Longititude
	}
	return 0
}

func (x *SpooferStatus) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SpooferStatus) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type UrdDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Longitude         float32 `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude          float32 `protobuf:"fixed32,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Height            int32   `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Status            int32   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Azimuth           int32   `protobuf:"varint,7,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Type              int32   `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	CompassStatus     int32   `protobuf:"varint,9,opt,name=compassStatus,proto3" json:"compassStatus,omitempty"`
	GpsStatus         int32   `protobuf:"varint,10,opt,name=gpsStatus,proto3" json:"gpsStatus,omitempty"`
	ReceiverStatus    int32   `protobuf:"varint,11,opt,name=receiverStatus,proto3" json:"receiverStatus,omitempty"`
	AntennaStatus     int32   `protobuf:"varint,12,opt,name=antennaStatus,proto3" json:"antennaStatus,omitempty"`
	AntennaCoverRange int32   `protobuf:"varint,13,opt,name=antennaCoverRange,proto3" json:"antennaCoverRange,omitempty"`
}

func (x *UrdDeviceInfo) Reset() {
	*x = UrdDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrdDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrdDeviceInfo) ProtoMessage() {}

func (x *UrdDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrdDeviceInfo.ProtoReflect.Descriptor instead.
func (*UrdDeviceInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{56}
}

func (x *UrdDeviceInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UrdDeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UrdDeviceInfo) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UrdDeviceInfo) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UrdDeviceInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UrdDeviceInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UrdDeviceInfo) GetAzimuth() int32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *UrdDeviceInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UrdDeviceInfo) GetCompassStatus() int32 {
	if x != nil {
		return x.CompassStatus
	}
	return 0
}

func (x *UrdDeviceInfo) GetGpsStatus() int32 {
	if x != nil {
		return x.GpsStatus
	}
	return 0
}

func (x *UrdDeviceInfo) GetReceiverStatus() int32 {
	if x != nil {
		return x.ReceiverStatus
	}
	return 0
}

func (x *UrdDeviceInfo) GetAntennaStatus() int32 {
	if x != nil {
		return x.AntennaStatus
	}
	return 0
}

func (x *UrdDeviceInfo) GetAntennaCoverRange() int32 {
	if x != nil {
		return x.AntennaCoverRange
	}
	return 0
}

type UrdDeviceInfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *UrdDeviceInfo             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UrdDeviceInfoUpload) Reset() {
	*x = UrdDeviceInfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrdDeviceInfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrdDeviceInfoUpload) ProtoMessage() {}

func (x *UrdDeviceInfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrdDeviceInfoUpload.ProtoReflect.Descriptor instead.
func (*UrdDeviceInfoUpload) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{57}
}

func (x *UrdDeviceInfoUpload) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UrdDeviceInfoUpload) GetData() *UrdDeviceInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UrdDroneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UniqueId         string  `protobuf:"bytes,2,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	TargetInfoLength int32   `protobuf:"varint,3,opt,name=targetInfoLength,proto3" json:"targetInfoLength,omitempty"`
	TargetInfo       string  `protobuf:"bytes,4,opt,name=targetInfo,proto3" json:"targetInfo,omitempty"`
	StationId        int32   `protobuf:"varint,5,opt,name=stationId,proto3" json:"stationId,omitempty"`
	TargetAzimuth    int32   `protobuf:"varint,6,opt,name=targetAzimuth,proto3" json:"targetAzimuth,omitempty"`
	TargetRange      int32   `protobuf:"varint,7,opt,name=targetRange,proto3" json:"targetRange,omitempty"`
	Longitude        float32 `protobuf:"fixed32,8,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude         float32 `protobuf:"fixed32,9,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Height           int32   `protobuf:"varint,10,opt,name=height,proto3" json:"height,omitempty"`
	Frequency        float64 `protobuf:"fixed64,11,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Bandwidth        float64 `protobuf:"fixed64,12,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	SignalStrength   float64 `protobuf:"fixed64,13,opt,name=signalStrength,proto3" json:"signalStrength,omitempty"`
	Trust            int32   `protobuf:"varint,14,opt,name=trust,proto3" json:"trust,omitempty"`
	Time             string  `protobuf:"bytes,15,opt,name=time,proto3" json:"time,omitempty"`
	DataType         int32   `protobuf:"varint,16,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Modulation       int32   `protobuf:"varint,17,opt,name=modulation,proto3" json:"modulation,omitempty"`
}

func (x *UrdDroneInfo) Reset() {
	*x = UrdDroneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrdDroneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrdDroneInfo) ProtoMessage() {}

func (x *UrdDroneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrdDroneInfo.ProtoReflect.Descriptor instead.
func (*UrdDroneInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{58}
}

func (x *UrdDroneInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UrdDroneInfo) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *UrdDroneInfo) GetTargetInfoLength() int32 {
	if x != nil {
		return x.TargetInfoLength
	}
	return 0
}

func (x *UrdDroneInfo) GetTargetInfo() string {
	if x != nil {
		return x.TargetInfo
	}
	return ""
}

func (x *UrdDroneInfo) GetStationId() int32 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *UrdDroneInfo) GetTargetAzimuth() int32 {
	if x != nil {
		return x.TargetAzimuth
	}
	return 0
}

func (x *UrdDroneInfo) GetTargetRange() int32 {
	if x != nil {
		return x.TargetRange
	}
	return 0
}

func (x *UrdDroneInfo) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UrdDroneInfo) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UrdDroneInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UrdDroneInfo) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *UrdDroneInfo) GetBandwidth() float64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *UrdDroneInfo) GetSignalStrength() float64 {
	if x != nil {
		return x.SignalStrength
	}
	return 0
}

func (x *UrdDroneInfo) GetTrust() int32 {
	if x != nil {
		return x.Trust
	}
	return 0
}

func (x *UrdDroneInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *UrdDroneInfo) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *UrdDroneInfo) GetModulation() int32 {
	if x != nil {
		return x.Modulation
	}
	return 0
}

type UrdDroneInfoUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *UrdDroneInfo              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UrdDroneInfoUpload) Reset() {
	*x = UrdDroneInfoUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrdDroneInfoUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrdDroneInfoUpload) ProtoMessage() {}

func (x *UrdDroneInfoUpload) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrdDroneInfoUpload.ProtoReflect.Descriptor instead.
func (*UrdDroneInfoUpload) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{59}
}

func (x *UrdDroneInfoUpload) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UrdDroneInfoUpload) GetData() *UrdDroneInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UrdSpectrumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	X      []int32                    `protobuf:"varint,2,rep,packed,name=x,proto3" json:"x,omitempty"`
	Y      []int32                    `protobuf:"varint,3,rep,packed,name=y,proto3" json:"y,omitempty"`
}

func (x *UrdSpectrumInfo) Reset() {
	*x = UrdSpectrumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrdSpectrumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrdSpectrumInfo) ProtoMessage() {}

func (x *UrdSpectrumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrdSpectrumInfo.ProtoReflect.Descriptor instead.
func (*UrdSpectrumInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{60}
}

func (x *UrdSpectrumInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UrdSpectrumInfo) GetX() []int32 {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *UrdSpectrumInfo) GetY() []int32 {
	if x != nil {
		return x.Y
	}
	return nil
}

type GimbalCounterDetectSocketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn           string                          `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	DetectionNum int32                           `protobuf:"varint,2,opt,name=detectionNum,proto3" json:"detectionNum,omitempty"`
	List         []*GimbalCounterDetectDroneInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GimbalCounterDetectSocketInfo) Reset() {
	*x = GimbalCounterDetectSocketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GimbalCounterDetectSocketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalCounterDetectSocketInfo) ProtoMessage() {}

func (x *GimbalCounterDetectSocketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalCounterDetectSocketInfo.ProtoReflect.Descriptor instead.
func (*GimbalCounterDetectSocketInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{61}
}

func (x *GimbalCounterDetectSocketInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *GimbalCounterDetectSocketInfo) GetDetectionNum() int32 {
	if x != nil {
		return x.DetectionNum
	}
	return 0
}

func (x *GimbalCounterDetectSocketInfo) GetList() []*GimbalCounterDetectDroneInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type GimbalCounterDetectDroneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductType        int32   `protobuf:"varint,1,opt,name=productType,proto3" json:"productType,omitempty"`
	DroneName          string  `protobuf:"bytes,2,opt,name=droneName,proto3" json:"droneName,omitempty"`
	SerialNum          string  `protobuf:"bytes,3,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	DroneLongitude     float64 `protobuf:"fixed64,4,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`
	DroneLatitude      float64 `protobuf:"fixed64,5,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`
	DroneHeight        float64 `protobuf:"fixed64,6,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`
	DroneYawAngle      float64 `protobuf:"fixed64,7,opt,name=droneYawAngle,proto3" json:"droneYawAngle,omitempty"`
	DroneSpeed         float64 `protobuf:"fixed64,8,opt,name=droneSpeed,proto3" json:"droneSpeed,omitempty"`
	DroneVerticalSpeed float64 `protobuf:"fixed64,9,opt,name=droneVerticalSpeed,proto3" json:"droneVerticalSpeed,omitempty"`
	SpeedDirection     int32   `protobuf:"varint,10,opt,name=speedDirection,proto3" json:"speedDirection,omitempty"`
	DroneSailLongitude float64 `protobuf:"fixed64,11,opt,name=droneSailLongitude,proto3" json:"droneSailLongitude,omitempty"`
	DroneSailLatitude  float64 `protobuf:"fixed64,12,opt,name=droneSailLatitude,proto3" json:"droneSailLatitude,omitempty"`
	PilotLongitude     float64 `protobuf:"fixed64,13,opt,name=pilotLongitude,proto3" json:"pilotLongitude,omitempty"`
	PilotLatitude      float64 `protobuf:"fixed64,14,opt,name=pilotLatitude,proto3" json:"pilotLatitude,omitempty"`
	DroneHorizon       float64 `protobuf:"fixed64,15,opt,name=droneHorizon,proto3" json:"droneHorizon,omitempty"`
	DronePitch         float64 `protobuf:"fixed64,16,opt,name=dronePitch,proto3" json:"dronePitch,omitempty"`
	UFreq              float64 `protobuf:"fixed64,17,opt,name=uFreq,proto3" json:"uFreq,omitempty"`
	UDistance          int32   `protobuf:"varint,18,opt,name=uDistance,proto3" json:"uDistance,omitempty"`
	UDangerLevels      int32   `protobuf:"varint,19,opt,name=uDangerLevels,proto3" json:"uDangerLevels,omitempty"`
	Role               int32   `protobuf:"varint,20,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GimbalCounterDetectDroneInfo) Reset() {
	*x = GimbalCounterDetectDroneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GimbalCounterDetectDroneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalCounterDetectDroneInfo) ProtoMessage() {}

func (x *GimbalCounterDetectDroneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalCounterDetectDroneInfo.ProtoReflect.Descriptor instead.
func (*GimbalCounterDetectDroneInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{62}
}

func (x *GimbalCounterDetectDroneInfo) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *GimbalCounterDetectDroneInfo) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *GimbalCounterDetectDroneInfo) GetDroneLongitude() float64 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneLatitude() float64 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneHeight() float64 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneYawAngle() float64 {
	if x != nil {
		return x.DroneYawAngle
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneSpeed() float64 {
	if x != nil {
		return x.DroneSpeed
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneVerticalSpeed() float64 {
	if x != nil {
		return x.DroneVerticalSpeed
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetSpeedDirection() int32 {
	if x != nil {
		return x.SpeedDirection
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneSailLongitude() float64 {
	if x != nil {
		return x.DroneSailLongitude
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneSailLatitude() float64 {
	if x != nil {
		return x.DroneSailLatitude
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetPilotLongitude() float64 {
	if x != nil {
		return x.PilotLongitude
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetPilotLatitude() float64 {
	if x != nil {
		return x.PilotLatitude
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDroneHorizon() float64 {
	if x != nil {
		return x.DroneHorizon
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetDronePitch() float64 {
	if x != nil {
		return x.DronePitch
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetUFreq() float64 {
	if x != nil {
		return x.UFreq
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetUDistance() int32 {
	if x != nil {
		return x.UDistance
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetUDangerLevels() int32 {
	if x != nil {
		return x.UDangerLevels
	}
	return 0
}

func (x *GimbalCounterDetectDroneInfo) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type GimbalCounterHeartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn            string  `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	TimeStamp     int32   `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	WorkStatus    int32   `protobuf:"varint,3,opt,name=workStatus,proto3" json:"workStatus,omitempty"`
	IsOnline      int32   `protobuf:"varint,4,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	HitFreq       int32   `protobuf:"varint,5,opt,name=hitFreq,proto3" json:"hitFreq,omitempty"`
	DetectFreq    float64 `protobuf:"fixed64,6,opt,name=detectFreq,proto3" json:"detectFreq,omitempty"`
	Elevation     float64 `protobuf:"fixed64,7,opt,name=elevation,proto3" json:"elevation,omitempty"`
	GunDirection  float64 `protobuf:"fixed64,8,opt,name=gunDirection,proto3" json:"gunDirection,omitempty"`
	GunLongitude  float64 `protobuf:"fixed64,9,opt,name=gunLongitude,proto3" json:"gunLongitude,omitempty"`
	GunLatitude   float64 `protobuf:"fixed64,10,opt,name=gunLatitude,proto3" json:"gunLatitude,omitempty"`
	GunAltitude   float64 `protobuf:"fixed64,11,opt,name=gunAltitude,proto3" json:"gunAltitude,omitempty"`
	SatellitesNum int32   `protobuf:"varint,12,opt,name=satellitesNum,proto3" json:"satellitesNum,omitempty"`
	FaultLevel    int32   `protobuf:"varint,13,opt,name=faultLevel,proto3" json:"faultLevel,omitempty"`
	CtrlFault     int32   `protobuf:"varint,14,opt,name=ctrlFault,proto3" json:"ctrlFault,omitempty"`
	AeagFault     int32   `protobuf:"varint,15,opt,name=aeagFault,proto3" json:"aeagFault,omitempty"`
	TracerFault   int32   `protobuf:"varint,16,opt,name=tracerFault,proto3" json:"tracerFault,omitempty"`
}

func (x *GimbalCounterHeartInfo) Reset() {
	*x = GimbalCounterHeartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GimbalCounterHeartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalCounterHeartInfo) ProtoMessage() {}

func (x *GimbalCounterHeartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalCounterHeartInfo.ProtoReflect.Descriptor instead.
func (*GimbalCounterHeartInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{63}
}

func (x *GimbalCounterHeartInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *GimbalCounterHeartInfo) GetTimeStamp() int32 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetWorkStatus() int32 {
	if x != nil {
		return x.WorkStatus
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetHitFreq() int32 {
	if x != nil {
		return x.HitFreq
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetDetectFreq() float64 {
	if x != nil {
		return x.DetectFreq
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetGunDirection() float64 {
	if x != nil {
		return x.GunDirection
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetGunLongitude() float64 {
	if x != nil {
		return x.GunLongitude
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetGunLatitude() float64 {
	if x != nil {
		return x.GunLatitude
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetGunAltitude() float64 {
	if x != nil {
		return x.GunAltitude
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetSatellitesNum() int32 {
	if x != nil {
		return x.SatellitesNum
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetFaultLevel() int32 {
	if x != nil {
		return x.FaultLevel
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetCtrlFault() int32 {
	if x != nil {
		return x.CtrlFault
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetAeagFault() int32 {
	if x != nil {
		return x.AeagFault
	}
	return 0
}

func (x *GimbalCounterHeartInfo) GetTracerFault() int32 {
	if x != nil {
		return x.TracerFault
	}
	return 0
}

type GimbalCounterHitSocketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn                 string  `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	HitState           int32   `protobuf:"varint,2,opt,name=hitState,proto3" json:"hitState,omitempty"`
	ProductType        int32   `protobuf:"varint,3,opt,name=productType,proto3" json:"productType,omitempty"`
	DroneName          string  `protobuf:"bytes,4,opt,name=droneName,proto3" json:"droneName,omitempty"`
	SerialNum          string  `protobuf:"bytes,5,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	DroneLongitude     float64 `protobuf:"fixed64,6,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`
	DroneLatitude      float64 `protobuf:"fixed64,7,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`
	DroneHeight        float64 `protobuf:"fixed64,8,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`
	DroneYawAngle      float64 `protobuf:"fixed64,9,opt,name=droneYawAngle,proto3" json:"droneYawAngle,omitempty"`
	DroneSpeed         float64 `protobuf:"fixed64,10,opt,name=droneSpeed,proto3" json:"droneSpeed,omitempty"`
	DroneVerticalSpeed float64 `protobuf:"fixed64,11,opt,name=droneVerticalSpeed,proto3" json:"droneVerticalSpeed,omitempty"`
	SpeedDirection     int32   `protobuf:"varint,12,opt,name=speedDirection,proto3" json:"speedDirection,omitempty"`
	DroneSailLongitude float64 `protobuf:"fixed64,13,opt,name=droneSailLongitude,proto3" json:"droneSailLongitude,omitempty"`
	DroneSailLatitude  float64 `protobuf:"fixed64,14,opt,name=droneSailLatitude,proto3" json:"droneSailLatitude,omitempty"`
	PilotLongitude     float64 `protobuf:"fixed64,15,opt,name=pilotLongitude,proto3" json:"pilotLongitude,omitempty"`
	PilotLatitude      float64 `protobuf:"fixed64,16,opt,name=pilotLatitude,proto3" json:"pilotLatitude,omitempty"`
	DroneHorizon       float64 `protobuf:"fixed64,17,opt,name=droneHorizon,proto3" json:"droneHorizon,omitempty"`
	DronePitch         float64 `protobuf:"fixed64,18,opt,name=dronePitch,proto3" json:"dronePitch,omitempty"`
	UFreq              float64 `protobuf:"fixed64,19,opt,name=uFreq,proto3" json:"uFreq,omitempty"`
	UDistance          int32   `protobuf:"varint,20,opt,name=uDistance,proto3" json:"uDistance,omitempty"`
	UDangerLevels      int32   `protobuf:"varint,21,opt,name=uDangerLevels,proto3" json:"uDangerLevels,omitempty"`
	Role               int32   `protobuf:"varint,22,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GimbalCounterHitSocketInfo) Reset() {
	*x = GimbalCounterHitSocketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GimbalCounterHitSocketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalCounterHitSocketInfo) ProtoMessage() {}

func (x *GimbalCounterHitSocketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalCounterHitSocketInfo.ProtoReflect.Descriptor instead.
func (*GimbalCounterHitSocketInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{64}
}

func (x *GimbalCounterHitSocketInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *GimbalCounterHitSocketInfo) GetHitState() int32 {
	if x != nil {
		return x.HitState
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *GimbalCounterHitSocketInfo) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *GimbalCounterHitSocketInfo) GetDroneLongitude() float64 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneLatitude() float64 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneHeight() float64 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneYawAngle() float64 {
	if x != nil {
		return x.DroneYawAngle
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneSpeed() float64 {
	if x != nil {
		return x.DroneSpeed
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneVerticalSpeed() float64 {
	if x != nil {
		return x.DroneVerticalSpeed
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetSpeedDirection() int32 {
	if x != nil {
		return x.SpeedDirection
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneSailLongitude() float64 {
	if x != nil {
		return x.DroneSailLongitude
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneSailLatitude() float64 {
	if x != nil {
		return x.DroneSailLatitude
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetPilotLongitude() float64 {
	if x != nil {
		return x.PilotLongitude
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetPilotLatitude() float64 {
	if x != nil {
		return x.PilotLatitude
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDroneHorizon() float64 {
	if x != nil {
		return x.DroneHorizon
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetDronePitch() float64 {
	if x != nil {
		return x.DronePitch
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetUFreq() float64 {
	if x != nil {
		return x.UFreq
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetUDistance() int32 {
	if x != nil {
		return x.UDistance
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetUDangerLevels() int32 {
	if x != nil {
		return x.UDangerLevels
	}
	return 0
}

func (x *GimbalCounterHitSocketInfo) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type FpvHeartInfoReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp     int32  `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Electricity   int32  `protobuf:"varint,2,opt,name=electricity,proto3" json:"electricity,omitempty"`
	Sn            string `protobuf:"bytes,3,opt,name=sn,proto3" json:"sn,omitempty"`
	IsOnline      int32  `protobuf:"varint,4,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	BatteryStatus int32  `protobuf:"varint,5,opt,name=batteryStatus,proto3" json:"batteryStatus,omitempty"`
	WorkMode      int32  `protobuf:"varint,6,opt,name=workMode,proto3" json:"workMode,omitempty"`
	WorkStatus    int32  `protobuf:"varint,7,opt,name=workStatus,proto3" json:"workStatus,omitempty"`
	AlarmLevel    int32  `protobuf:"varint,8,opt,name=alarmLevel,proto3" json:"alarmLevel,omitempty"`
}

func (x *FpvHeartInfoReport) Reset() {
	*x = FpvHeartInfoReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvHeartInfoReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvHeartInfoReport) ProtoMessage() {}

func (x *FpvHeartInfoReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvHeartInfoReport.ProtoReflect.Descriptor instead.
func (*FpvHeartInfoReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{65}
}

func (x *FpvHeartInfoReport) GetTimeStamp() int32 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *FpvHeartInfoReport) GetElectricity() int32 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *FpvHeartInfoReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *FpvHeartInfoReport) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *FpvHeartInfoReport) GetBatteryStatus() int32 {
	if x != nil {
		return x.BatteryStatus
	}
	return 0
}

func (x *FpvHeartInfoReport) GetWorkMode() int32 {
	if x != nil {
		return x.WorkMode
	}
	return 0
}

func (x *FpvHeartInfoReport) GetWorkStatus() int32 {
	if x != nil {
		return x.WorkStatus
	}
	return 0
}

func (x *FpvHeartInfoReport) GetAlarmLevel() int32 {
	if x != nil {
		return x.AlarmLevel
	}
	return 0
}

type FpvHitStateInfoReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HitState int32 `protobuf:"varint,1,opt,name=hitState,proto3" json:"hitState,omitempty"` // 1 打击中   2  打击结束
}

func (x *FpvHitStateInfoReport) Reset() {
	*x = FpvHitStateInfoReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvHitStateInfoReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvHitStateInfoReport) ProtoMessage() {}

func (x *FpvHitStateInfoReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvHitStateInfoReport.ProtoReflect.Descriptor instead.
func (*FpvHitStateInfoReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{66}
}

func (x *FpvHitStateInfoReport) GetHitState() int32 {
	if x != nil {
		return x.HitState
	}
	return 0
}

type FpvDetectInfoReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn        string       `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	QxPower   float64      `protobuf:"fixed64,2,opt,name=qxPower,proto3" json:"qxPower,omitempty"`
	DxPower   float64      `protobuf:"fixed64,3,opt,name=dxPower,proto3" json:"dxPower,omitempty"`
	DxHorizon float64      `protobuf:"fixed64,4,opt,name=dxHorizon,proto3" json:"dxHorizon,omitempty"`
	List      []*FpvDetect `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FpvDetectInfoReport) Reset() {
	*x = FpvDetectInfoReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvDetectInfoReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvDetectInfoReport) ProtoMessage() {}

func (x *FpvDetectInfoReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvDetectInfoReport.ProtoReflect.Descriptor instead.
func (*FpvDetectInfoReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{67}
}

func (x *FpvDetectInfoReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *FpvDetectInfoReport) GetQxPower() float64 {
	if x != nil {
		return x.QxPower
	}
	return 0
}

func (x *FpvDetectInfoReport) GetDxPower() float64 {
	if x != nil {
		return x.DxPower
	}
	return 0
}

func (x *FpvDetectInfoReport) GetDxHorizon() float64 {
	if x != nil {
		return x.DxHorizon
	}
	return 0
}

func (x *FpvDetectInfoReport) GetList() []*FpvDetect {
	if x != nil {
		return x.List
	}
	return nil
}

type FpvDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UavNumber     int32   `protobuf:"varint,1,opt,name=uavNumber,proto3" json:"uavNumber,omitempty"`
	DroneName     string  `protobuf:"bytes,2,opt,name=droneName,proto3" json:"droneName,omitempty"`
	DroneHorizon  float64 `protobuf:"fixed64,3,opt,name=droneHorizon,proto3" json:"droneHorizon,omitempty"`
	UFreq         float64 `protobuf:"fixed64,4,opt,name=uFreq,proto3" json:"uFreq,omitempty"`
	UDangerLevels int32   `protobuf:"varint,5,opt,name=uDangerLevels,proto3" json:"uDangerLevels,omitempty"`
}

func (x *FpvDetect) Reset() {
	*x = FpvDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvDetect) ProtoMessage() {}

func (x *FpvDetect) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvDetect.ProtoReflect.Descriptor instead.
func (*FpvDetect) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{68}
}

func (x *FpvDetect) GetUavNumber() int32 {
	if x != nil {
		return x.UavNumber
	}
	return 0
}

func (x *FpvDetect) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *FpvDetect) GetDroneHorizon() float64 {
	if x != nil {
		return x.DroneHorizon
	}
	return 0
}

func (x *FpvDetect) GetUFreq() float64 {
	if x != nil {
		return x.UFreq
	}
	return 0
}

func (x *FpvDetect) GetUDangerLevels() int32 {
	if x != nil {
		return x.UDangerLevels
	}
	return 0
}

//统一定义无人机属性
type DroneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportDevType       int32   `protobuf:"varint,1,opt,name=reportDevType,proto3" json:"reportDevType,omitempty"` //上报消息设备类型
	Role                int32   `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
	DroneName           string  `protobuf:"bytes,3,opt,name=droneName,proto3" json:"droneName,omitempty"`
	SerialNum           string  `protobuf:"bytes,4,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	DroneLongitude      float64 `protobuf:"fixed64,5,opt,name=droneLongitude,proto3" json:"droneLongitude,omitempty"`
	DroneLatitude       float64 `protobuf:"fixed64,6,opt,name=droneLatitude,proto3" json:"droneLatitude,omitempty"`
	DroneHeight         float64 `protobuf:"fixed64,7,opt,name=droneHeight,proto3" json:"droneHeight,omitempty"`
	DroneYawAngle       float64 `protobuf:"fixed64,8,opt,name=droneYawAngle,proto3" json:"droneYawAngle,omitempty"`
	DroneSpeed          float64 `protobuf:"fixed64,9,opt,name=droneSpeed,proto3" json:"droneSpeed,omitempty"`
	DroneVerticalSpeed  float64 `protobuf:"fixed64,10,opt,name=droneVerticalSpeed,proto3" json:"droneVerticalSpeed,omitempty"`
	OperatorLongitude   float64 `protobuf:"fixed64,11,opt,name=operatorLongitude,proto3" json:"operatorLongitude,omitempty"`
	OperatorLatitude    float64 `protobuf:"fixed64,12,opt,name=operatorLatitude,proto3" json:"operatorLatitude,omitempty"`
	Distance            float64 `protobuf:"fixed64,13,opt,name=distance,proto3" json:"distance,omitempty"`
	DangerLevels        int32   `protobuf:"varint,14,opt,name=dangerLevels,proto3" json:"dangerLevels,omitempty"`
	Freq                float64 `protobuf:"fixed64,15,opt,name=freq,proto3" json:"freq,omitempty"`
	DroneSpeedDerection int32   `protobuf:"varint,16,opt,name=droneSpeedDerection,proto3" json:"droneSpeedDerection,omitempty"`
	DroneHorizon        float64 `protobuf:"fixed64,17,opt,name=droneHorizon,proto3" json:"droneHorizon,omitempty"`
	QxPower             float64 `protobuf:"fixed64,18,opt,name=qxPower,proto3" json:"qxPower,omitempty"`
	DxPower             float64 `protobuf:"fixed64,19,opt,name=dxPower,proto3" json:"dxPower,omitempty"`
	DxHorizon           float64 `protobuf:"fixed64,20,opt,name=dxHorizon,proto3" json:"dxHorizon,omitempty"`
	DroneSailLongitude  float64 `protobuf:"fixed64,21,opt,name=droneSailLongitude,proto3" json:"droneSailLongitude,omitempty"`
	DroneSailLatitude   float64 `protobuf:"fixed64,22,opt,name=droneSailLatitude,proto3" json:"droneSailLatitude,omitempty"`
	DronePitch          float64 `protobuf:"fixed64,23,opt,name=dronePitch,proto3" json:"dronePitch,omitempty"`
	ObjId               int32   `protobuf:"varint,24,opt,name=objId,proto3" json:"objId,omitempty"`
	Alive               int32   `protobuf:"varint,25,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *DroneInfo) Reset() {
	*x = DroneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DroneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DroneInfo) ProtoMessage() {}

func (x *DroneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DroneInfo.ProtoReflect.Descriptor instead.
func (*DroneInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{69}
}

func (x *DroneInfo) GetReportDevType() int32 {
	if x != nil {
		return x.ReportDevType
	}
	return 0
}

func (x *DroneInfo) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *DroneInfo) GetDroneName() string {
	if x != nil {
		return x.DroneName
	}
	return ""
}

func (x *DroneInfo) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *DroneInfo) GetDroneLongitude() float64 {
	if x != nil {
		return x.DroneLongitude
	}
	return 0
}

func (x *DroneInfo) GetDroneLatitude() float64 {
	if x != nil {
		return x.DroneLatitude
	}
	return 0
}

func (x *DroneInfo) GetDroneHeight() float64 {
	if x != nil {
		return x.DroneHeight
	}
	return 0
}

func (x *DroneInfo) GetDroneYawAngle() float64 {
	if x != nil {
		return x.DroneYawAngle
	}
	return 0
}

func (x *DroneInfo) GetDroneSpeed() float64 {
	if x != nil {
		return x.DroneSpeed
	}
	return 0
}

func (x *DroneInfo) GetDroneVerticalSpeed() float64 {
	if x != nil {
		return x.DroneVerticalSpeed
	}
	return 0
}

func (x *DroneInfo) GetOperatorLongitude() float64 {
	if x != nil {
		return x.OperatorLongitude
	}
	return 0
}

func (x *DroneInfo) GetOperatorLatitude() float64 {
	if x != nil {
		return x.OperatorLatitude
	}
	return 0
}

func (x *DroneInfo) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *DroneInfo) GetDangerLevels() int32 {
	if x != nil {
		return x.DangerLevels
	}
	return 0
}

func (x *DroneInfo) GetFreq() float64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

func (x *DroneInfo) GetDroneSpeedDerection() int32 {
	if x != nil {
		return x.DroneSpeedDerection
	}
	return 0
}

func (x *DroneInfo) GetDroneHorizon() float64 {
	if x != nil {
		return x.DroneHorizon
	}
	return 0
}

func (x *DroneInfo) GetQxPower() float64 {
	if x != nil {
		return x.QxPower
	}
	return 0
}

func (x *DroneInfo) GetDxPower() float64 {
	if x != nil {
		return x.DxPower
	}
	return 0
}

func (x *DroneInfo) GetDxHorizon() float64 {
	if x != nil {
		return x.DxHorizon
	}
	return 0
}

func (x *DroneInfo) GetDroneSailLongitude() float64 {
	if x != nil {
		return x.DroneSailLongitude
	}
	return 0
}

func (x *DroneInfo) GetDroneSailLatitude() float64 {
	if x != nil {
		return x.DroneSailLatitude
	}
	return 0
}

func (x *DroneInfo) GetDronePitch() float64 {
	if x != nil {
		return x.DronePitch
	}
	return 0
}

func (x *DroneInfo) GetObjId() int32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *DroneInfo) GetAlive() int32 {
	if x != nil {
		return x.Alive
	}
	return 0
}

type FpvVideoStreamItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndex uint32 `protobuf:"varint,1,opt,name=frameIndex,proto3" json:"frameIndex,omitempty"` // 帧序号
	PackMax    uint32 `protobuf:"varint,2,opt,name=packMax,proto3" json:"packMax,omitempty"`       //最大分包数
	PackIndex  uint32 `protobuf:"varint,3,opt,name=packIndex,proto3" json:"packIndex,omitempty"`   //分包序号
	DataLen    uint32 `protobuf:"varint,4,opt,name=dataLen,proto3" json:"dataLen,omitempty"`       //数据长度
	Data       []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`              //数据内容
}

func (x *FpvVideoStreamItem) Reset() {
	*x = FpvVideoStreamItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpvVideoStreamItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpvVideoStreamItem) ProtoMessage() {}

func (x *FpvVideoStreamItem) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpvVideoStreamItem.ProtoReflect.Descriptor instead.
func (*FpvVideoStreamItem) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{70}
}

func (x *FpvVideoStreamItem) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *FpvVideoStreamItem) GetPackMax() uint32 {
	if x != nil {
		return x.PackMax
	}
	return 0
}

func (x *FpvVideoStreamItem) GetPackIndex() uint32 {
	if x != nil {
		return x.PackIndex
	}
	return 0
}

func (x *FpvVideoStreamItem) GetDataLen() uint32 {
	if x != nil {
		return x.DataLen
	}
	return 0
}

func (x *FpvVideoStreamItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgxPerceptionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn        string                     `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	TimeStamp int32                      `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	ObjId     int32                      `protobuf:"varint,3,opt,name=objId,proto3" json:"objId,omitempty"`
	TargetId  int32                      `protobuf:"varint,4,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	Zoom      float32                    `protobuf:"fixed32,5,opt,name=Zoom,proto3" json:"Zoom,omitempty"`
	HFov      float32                    `protobuf:"fixed32,6,opt,name=HFov,proto3" json:"HFov,omitempty"`
	VFov      float32                    `protobuf:"fixed32,7,opt,name=VFov,proto3" json:"VFov,omitempty"`
	List      []*AgxPerceptionReportInfo `protobuf:"bytes,8,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AgxPerceptionReport) Reset() {
	*x = AgxPerceptionReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxPerceptionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxPerceptionReport) ProtoMessage() {}

func (x *AgxPerceptionReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxPerceptionReport.ProtoReflect.Descriptor instead.
func (*AgxPerceptionReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{71}
}

func (x *AgxPerceptionReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *AgxPerceptionReport) GetTimeStamp() int32 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *AgxPerceptionReport) GetObjId() int32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *AgxPerceptionReport) GetTargetId() int32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *AgxPerceptionReport) GetZoom() float32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

func (x *AgxPerceptionReport) GetHFov() float32 {
	if x != nil {
		return x.HFov
	}
	return 0
}

func (x *AgxPerceptionReport) GetVFov() float32 {
	if x != nil {
		return x.VFov
	}
	return 0
}

func (x *AgxPerceptionReport) GetList() []*AgxPerceptionReportInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type AgxPerceptionReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Classification int32 `protobuf:"varint,2,opt,name=classification,proto3" json:"classification,omitempty"` //目标类别，0x00：未识别0x01：无人机0x02：单兵0x03：车辆0x04：鸟类0x05：直升机
	//其他无效。（与雷达一致）
	RectX       int32   `protobuf:"varint,3,opt,name=rectX,proto3" json:"rectX,omitempty"`
	RectY       int32   `protobuf:"varint,4,opt,name=rectY,proto3" json:"rectY,omitempty"`
	RectW       int32   `protobuf:"varint,5,opt,name=rectW,proto3" json:"rectW,omitempty"`
	RectH       int32   `protobuf:"varint,6,opt,name=rectH,proto3" json:"rectH,omitempty"`
	RectXV      int32   `protobuf:"varint,7,opt,name=rectXV,proto3" json:"rectXV,omitempty"`
	RectYV      int32   `protobuf:"varint,8,opt,name=rectYV,proto3" json:"rectYV,omitempty"`
	ClassFyProb float32 `protobuf:"fixed32,9,opt,name=classFyProb,proto3" json:"classFyProb,omitempty"`
	Type        int32   `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	TypeProb    float32 `protobuf:"fixed32,11,opt,name=typeProb,proto3" json:"typeProb,omitempty"`
	LoadLever   int32   `protobuf:"varint,12,opt,name=loadLever,proto3" json:"loadLever,omitempty"`
	DangerLever int32   `protobuf:"varint,13,opt,name=dangerLever,proto3" json:"dangerLever,omitempty"`
	Azimuth     float32 `protobuf:"fixed32,14,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Elevation   float32 `protobuf:"fixed32,15,opt,name=elevation,proto3" json:"elevation,omitempty"`
	Range       float32 `protobuf:"fixed32,16,opt,name=range,proto3" json:"range,omitempty"`
	MotionType  int32   `protobuf:"varint,17,opt,name=motionType,proto3" json:"motionType,omitempty"`
	BTracked    int32   `protobuf:"varint,18,opt,name=bTracked,proto3" json:"bTracked,omitempty"`
}

func (x *AgxPerceptionReportInfo) Reset() {
	*x = AgxPerceptionReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxPerceptionReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxPerceptionReportInfo) ProtoMessage() {}

func (x *AgxPerceptionReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxPerceptionReportInfo.ProtoReflect.Descriptor instead.
func (*AgxPerceptionReportInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{72}
}

func (x *AgxPerceptionReportInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetClassification() int32 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRectX() int32 {
	if x != nil {
		return x.RectX
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRectY() int32 {
	if x != nil {
		return x.RectY
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRectW() int32 {
	if x != nil {
		return x.RectW
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRectH() int32 {
	if x != nil {
		return x.RectH
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRectXV() int32 {
	if x != nil {
		return x.RectXV
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRectYV() int32 {
	if x != nil {
		return x.RectYV
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetClassFyProb() float32 {
	if x != nil {
		return x.ClassFyProb
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetTypeProb() float32 {
	if x != nil {
		return x.TypeProb
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetLoadLever() int32 {
	if x != nil {
		return x.LoadLever
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetDangerLever() int32 {
	if x != nil {
		return x.DangerLever
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetAzimuth() float32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetElevation() float32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetRange() float32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetMotionType() int32 {
	if x != nil {
		return x.MotionType
	}
	return 0
}

func (x *AgxPerceptionReportInfo) GetBTracked() int32 {
	if x != nil {
		return x.BTracked
	}
	return 0
}

type AgxHeartBeatReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Electricity int32  `protobuf:"varint,1,opt,name=electricity,proto3" json:"electricity,omitempty"`
	Status      int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	IsOnline    int32  `protobuf:"varint,3,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	Ip          string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Sn          string `protobuf:"bytes,5,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *AgxHeartBeatReport) Reset() {
	*x = AgxHeartBeatReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxHeartBeatReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxHeartBeatReport) ProtoMessage() {}

func (x *AgxHeartBeatReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxHeartBeatReport.ProtoReflect.Descriptor instead.
func (*AgxHeartBeatReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{73}
}

func (x *AgxHeartBeatReport) GetElectricity() int32 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *AgxHeartBeatReport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AgxHeartBeatReport) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *AgxHeartBeatReport) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AgxHeartBeatReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

type AgxDetectInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjId            uint32  `protobuf:"varint,1,opt,name=objId,proto3" json:"objId,omitempty"`
	HeaderUid        int64   `protobuf:"varint,2,opt,name=headerUid,proto3" json:"headerUid,omitempty"`
	Azimuth          float64 `protobuf:"fixed64,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	ObjDistInterpol  float64 `protobuf:"fixed64,4,opt,name=objDistInterpol,proto3" json:"objDistInterpol,omitempty"`
	Elevation        float64 `protobuf:"fixed64,5,opt,name=elevation,proto3" json:"elevation,omitempty"`
	Velocity         float64 `protobuf:"fixed64,6,opt,name=velocity,proto3" json:"velocity,omitempty"`
	DopplerChn       int32   `protobuf:"varint,7,opt,name=dopplerChn,proto3" json:"dopplerChn,omitempty"`
	Mag              float64 `protobuf:"fixed64,8,opt,name=mag,proto3" json:"mag,omitempty"`
	Ambiguous        int32   `protobuf:"varint,9,opt,name=ambiguous,proto3" json:"ambiguous,omitempty"`
	Classification   int32   `protobuf:"varint,10,opt,name=classification,proto3" json:"classification,omitempty"`
	ClassfyProb      float64 `protobuf:"fixed64,11,opt,name=classfyProb,proto3" json:"classfyProb,omitempty"`
	ExistingProb     float32 `protobuf:"fixed32,12,opt,name=existingProb,proto3" json:"existingProb,omitempty"`
	AbsVel           float64 `protobuf:"fixed64,13,opt,name=absVel,proto3" json:"absVel,omitempty"`
	OrientationAngle float64 `protobuf:"fixed64,14,opt,name=orientationAngle,proto3" json:"orientationAngle,omitempty"`
	Alive            uint32  `protobuf:"varint,15,opt,name=alive,proto3" json:"alive,omitempty"`
	TwsTasFlag       uint32  `protobuf:"varint,16,opt,name=twsTasFlag,proto3" json:"twsTasFlag,omitempty"`
	X                float64 `protobuf:"fixed64,17,opt,name=x,proto3" json:"x,omitempty"`
	Y                float64 `protobuf:"fixed64,18,opt,name=y,proto3" json:"y,omitempty"`
	Z                float64 `protobuf:"fixed64,19,opt,name=z,proto3" json:"z,omitempty"`
	Vx               float64 `protobuf:"fixed64,20,opt,name=vx,proto3" json:"vx,omitempty"`
	Vy               float64 `protobuf:"fixed64,21,opt,name=vy,proto3" json:"vy,omitempty"`
	Vz               float64 `protobuf:"fixed64,22,opt,name=vz,proto3" json:"vz,omitempty"`
	Ax               float64 `protobuf:"fixed64,23,opt,name=ax,proto3" json:"ax,omitempty"`
	Ay               float64 `protobuf:"fixed64,24,opt,name=ay,proto3" json:"ay,omitempty"`
	Az               float64 `protobuf:"fixed64,25,opt,name=az,proto3" json:"az,omitempty"`
	XVariance        float64 `protobuf:"fixed64,26,opt,name=xVariance,proto3" json:"xVariance,omitempty"`
	YVariance        float64 `protobuf:"fixed64,27,opt,name=yVariance,proto3" json:"yVariance,omitempty"`
	ZVariance        float64 `protobuf:"fixed64,28,opt,name=zVariance,proto3" json:"zVariance,omitempty"`
	VxVariance       float64 `protobuf:"fixed64,29,opt,name=vxVariance,proto3" json:"vxVariance,omitempty"`
	VyVariance       float64 `protobuf:"fixed64,30,opt,name=vyVariance,proto3" json:"vyVariance,omitempty"`
	VzVariance       float64 `protobuf:"fixed64,31,opt,name=vzVariance,proto3" json:"vzVariance,omitempty"`
	AxVariance       float64 `protobuf:"fixed64,32,opt,name=axVariance,proto3" json:"axVariance,omitempty"`
	AyVariance       float64 `protobuf:"fixed64,33,opt,name=ayVariance,proto3" json:"ayVariance,omitempty"`
	AzVariance       float64 `protobuf:"fixed64,34,opt,name=azVariance,proto3" json:"azVariance,omitempty"`
	StateType        int32   `protobuf:"varint,35,opt,name=stateType,proto3" json:"stateType,omitempty"`
	MotionType       int32   `protobuf:"varint,36,opt,name=motionType,proto3" json:"motionType,omitempty"`
	ForcastFrameNum  int32   `protobuf:"varint,37,opt,name=forcastFrameNum,proto3" json:"forcastFrameNum,omitempty"`
	AssociationNum   int32   `protobuf:"varint,38,opt,name=associationNum,proto3" json:"associationNum,omitempty"`
	AssocBit0        uint32  `protobuf:"varint,39,opt,name=assocBit0,proto3" json:"assocBit0,omitempty"`
	AssocBit1        uint32  `protobuf:"varint,40,opt,name=assocBit1,proto3" json:"assocBit1,omitempty"`
	Reserve          uint32  `protobuf:"varint,41,opt,name=reserve,proto3" json:"reserve,omitempty"`
	Reserved2        uint32  `protobuf:"varint,42,opt,name=reserved2,proto3" json:"reserved2,omitempty"`
	Crc              uint32  `protobuf:"varint,43,opt,name=crc,proto3" json:"crc,omitempty"`
	CreateTime       string  `protobuf:"bytes,44,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Vendor           string  `protobuf:"bytes,45,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Frequency        string  `protobuf:"bytes,46,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Model            string  `protobuf:"bytes,47,opt,name=model,proto3" json:"model,omitempty"`
	IsWhitelist      bool    `protobuf:"varint,48,opt,name=isWhitelist,proto3" json:"isWhitelist,omitempty"`
	Level            int32   `protobuf:"varint,49,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *AgxDetectInfoList) Reset() {
	*x = AgxDetectInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxDetectInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxDetectInfoList) ProtoMessage() {}

func (x *AgxDetectInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxDetectInfoList.ProtoReflect.Descriptor instead.
func (*AgxDetectInfoList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{74}
}

func (x *AgxDetectInfoList) GetObjId() uint32 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *AgxDetectInfoList) GetHeaderUid() int64 {
	if x != nil {
		return x.HeaderUid
	}
	return 0
}

func (x *AgxDetectInfoList) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *AgxDetectInfoList) GetObjDistInterpol() float64 {
	if x != nil {
		return x.ObjDistInterpol
	}
	return 0
}

func (x *AgxDetectInfoList) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *AgxDetectInfoList) GetVelocity() float64 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

func (x *AgxDetectInfoList) GetDopplerChn() int32 {
	if x != nil {
		return x.DopplerChn
	}
	return 0
}

func (x *AgxDetectInfoList) GetMag() float64 {
	if x != nil {
		return x.Mag
	}
	return 0
}

func (x *AgxDetectInfoList) GetAmbiguous() int32 {
	if x != nil {
		return x.Ambiguous
	}
	return 0
}

func (x *AgxDetectInfoList) GetClassification() int32 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *AgxDetectInfoList) GetClassfyProb() float64 {
	if x != nil {
		return x.ClassfyProb
	}
	return 0
}

func (x *AgxDetectInfoList) GetExistingProb() float32 {
	if x != nil {
		return x.ExistingProb
	}
	return 0
}

func (x *AgxDetectInfoList) GetAbsVel() float64 {
	if x != nil {
		return x.AbsVel
	}
	return 0
}

func (x *AgxDetectInfoList) GetOrientationAngle() float64 {
	if x != nil {
		return x.OrientationAngle
	}
	return 0
}

func (x *AgxDetectInfoList) GetAlive() uint32 {
	if x != nil {
		return x.Alive
	}
	return 0
}

func (x *AgxDetectInfoList) GetTwsTasFlag() uint32 {
	if x != nil {
		return x.TwsTasFlag
	}
	return 0
}

func (x *AgxDetectInfoList) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *AgxDetectInfoList) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *AgxDetectInfoList) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *AgxDetectInfoList) GetVx() float64 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *AgxDetectInfoList) GetVy() float64 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *AgxDetectInfoList) GetVz() float64 {
	if x != nil {
		return x.Vz
	}
	return 0
}

func (x *AgxDetectInfoList) GetAx() float64 {
	if x != nil {
		return x.Ax
	}
	return 0
}

func (x *AgxDetectInfoList) GetAy() float64 {
	if x != nil {
		return x.Ay
	}
	return 0
}

func (x *AgxDetectInfoList) GetAz() float64 {
	if x != nil {
		return x.Az
	}
	return 0
}

func (x *AgxDetectInfoList) GetXVariance() float64 {
	if x != nil {
		return x.XVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetYVariance() float64 {
	if x != nil {
		return x.YVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetZVariance() float64 {
	if x != nil {
		return x.ZVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetVxVariance() float64 {
	if x != nil {
		return x.VxVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetVyVariance() float64 {
	if x != nil {
		return x.VyVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetVzVariance() float64 {
	if x != nil {
		return x.VzVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetAxVariance() float64 {
	if x != nil {
		return x.AxVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetAyVariance() float64 {
	if x != nil {
		return x.AyVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetAzVariance() float64 {
	if x != nil {
		return x.AzVariance
	}
	return 0
}

func (x *AgxDetectInfoList) GetStateType() int32 {
	if x != nil {
		return x.StateType
	}
	return 0
}

func (x *AgxDetectInfoList) GetMotionType() int32 {
	if x != nil {
		return x.MotionType
	}
	return 0
}

func (x *AgxDetectInfoList) GetForcastFrameNum() int32 {
	if x != nil {
		return x.ForcastFrameNum
	}
	return 0
}

func (x *AgxDetectInfoList) GetAssociationNum() int32 {
	if x != nil {
		return x.AssociationNum
	}
	return 0
}

func (x *AgxDetectInfoList) GetAssocBit0() uint32 {
	if x != nil {
		return x.AssocBit0
	}
	return 0
}

func (x *AgxDetectInfoList) GetAssocBit1() uint32 {
	if x != nil {
		return x.AssocBit1
	}
	return 0
}

func (x *AgxDetectInfoList) GetReserve() uint32 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *AgxDetectInfoList) GetReserved2() uint32 {
	if x != nil {
		return x.Reserved2
	}
	return 0
}

func (x *AgxDetectInfoList) GetCrc() uint32 {
	if x != nil {
		return x.Crc
	}
	return 0
}

func (x *AgxDetectInfoList) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *AgxDetectInfoList) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AgxDetectInfoList) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *AgxDetectInfoList) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AgxDetectInfoList) GetIsWhitelist() bool {
	if x != nil {
		return x.IsWhitelist
	}
	return false
}

func (x *AgxDetectInfoList) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AgxDevStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   string         `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	List []*AgxDeviceSn `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AgxDevStateList) Reset() {
	*x = AgxDevStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxDevStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxDevStateList) ProtoMessage() {}

func (x *AgxDevStateList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxDevStateList.ProtoReflect.Descriptor instead.
func (*AgxDevStateList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{75}
}

func (x *AgxDevStateList) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *AgxDevStateList) GetList() []*AgxDeviceSn {
	if x != nil {
		return x.List
	}
	return nil
}

type AgxDeviceSn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevType int32  `protobuf:"varint,1,opt,name=devType,proto3" json:"devType,omitempty"` //设备类型  01雷达    02ptz    04tracer  05无线电设备
	DevSn   string `protobuf:"bytes,2,opt,name=devSn,proto3" json:"devSn,omitempty"`
}

func (x *AgxDeviceSn) Reset() {
	*x = AgxDeviceSn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxDeviceSn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxDeviceSn) ProtoMessage() {}

func (x *AgxDeviceSn) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxDeviceSn.ProtoReflect.Descriptor instead.
func (*AgxDeviceSn) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{76}
}

func (x *AgxDeviceSn) GetDevType() int32 {
	if x != nil {
		return x.DevType
	}
	return 0
}

func (x *AgxDeviceSn) GetDevSn() string {
	if x != nil {
		return x.DevSn
	}
	return ""
}

type AgxPTZStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn           string  `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"` //光电设备SN号
	TimeStamp    int64   `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	PtzLongitude float32 `protobuf:"fixed32,3,opt,name=ptzLongitude,proto3" json:"ptzLongitude,omitempty"`
	PtzLatitude  float32 `protobuf:"fixed32,4,opt,name=ptzLatitude,proto3" json:"ptzLatitude,omitempty"`
	PtzHeight    float32 `protobuf:"fixed32,5,opt,name=ptzHeight,proto3" json:"ptzHeight,omitempty"`
	Azimuth      float32 `protobuf:"fixed32,6,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Elevation    float32 `protobuf:"fixed32,7,opt,name=elevation,proto3" json:"elevation,omitempty"`
	OmegaAz      float32 `protobuf:"fixed32,8,opt,name=omegaAz,proto3" json:"omegaAz,omitempty"`
	OmegaEl      float32 `protobuf:"fixed32,9,opt,name=omegaEl,proto3" json:"omegaEl,omitempty"`
	Zoom         float32 `protobuf:"fixed32,10,opt,name=zoom,proto3" json:"zoom,omitempty"`
}

func (x *AgxPTZStateList) Reset() {
	*x = AgxPTZStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgxPTZStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgxPTZStateList) ProtoMessage() {}

func (x *AgxPTZStateList) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgxPTZStateList.ProtoReflect.Descriptor instead.
func (*AgxPTZStateList) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{77}
}

func (x *AgxPTZStateList) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *AgxPTZStateList) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *AgxPTZStateList) GetPtzLongitude() float32 {
	if x != nil {
		return x.PtzLongitude
	}
	return 0
}

func (x *AgxPTZStateList) GetPtzLatitude() float32 {
	if x != nil {
		return x.PtzLatitude
	}
	return 0
}

func (x *AgxPTZStateList) GetPtzHeight() float32 {
	if x != nil {
		return x.PtzHeight
	}
	return 0
}

func (x *AgxPTZStateList) GetAzimuth() float32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *AgxPTZStateList) GetElevation() float32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *AgxPTZStateList) GetOmegaAz() float32 {
	if x != nil {
		return x.OmegaAz
	}
	return 0
}

func (x *AgxPTZStateList) GetOmegaEl() float32 {
	if x != nil {
		return x.OmegaEl
	}
	return 0
}

func (x *AgxPTZStateList) GetZoom() float32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

type TracerDroneIdRemoteIdDetectDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 无人机名字
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 无人机SN码
	SerialNum string `protobuf:"bytes,2,opt,name=serialNum,proto3" json:"serialNum,omitempty"`
	//  // 无人机实名登记号
	//  string uuid = 3;
	// 无人机航向角度 (deg)
	Direction float64 `protobuf:"fixed64,3,opt,name=direction,proto3" json:"direction,omitempty"`
	// 无人机对地速度 (m/s)
	Speed float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed,omitempty"`
	// 无人机垂直速度 (m/s)
	VerticalSpeed float64 `protobuf:"fixed64,5,opt,name=verticalSpeed,proto3" json:"verticalSpeed,omitempty"`
	// 无人机距地高度 (m)
	Height float64 `protobuf:"fixed64,6,opt,name=height,proto3" json:"height,omitempty"`
	// 无人机经度 (deg)
	Longitude float64 `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 无人机纬度 (deg)
	Latitude float64 `protobuf:"fixed64,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 无人机飞手经度 (deg)
	PilotLongitude float64 `protobuf:"fixed64,9,opt,name=pilotLongitude,proto3" json:"pilotLongitude,omitempty"`
	// 无人机飞手纬度 (deg)
	PilotLatitude float64 `protobuf:"fixed64,10,opt,name=pilotLatitude,proto3" json:"pilotLatitude,omitempty"`
	// 无人机返航点经度 (deg)
	HomeLongitude float64 `protobuf:"fixed64,11,opt,name=homeLongitude,proto3" json:"homeLongitude,omitempty"`
	// 无人机返航点纬度 (deg)
	HomeLatitude float64 `protobuf:"fixed64,12,opt,name=homeLatitude,proto3" json:"homeLatitude,omitempty"`
	//  // 无人机已录取时间 (ms)
	//  uint32 recordTime = 14;
	AliveTime uint32 `protobuf:"varint,13,opt,name=aliveTime,proto3" json:"aliveTime,omitempty"`
	// 后续目标信息字段来源掩码：1：RemoteID only; 2：DroneID only; 3：Both (remoteID和DroneID都有)
	TargetMask uint32 `protobuf:"varint,14,opt,name=targetMask,proto3" json:"targetMask,omitempty"`
	// RemoteID only
	// RemoteID 类型代码
	TypeCodeRid uint32 `protobuf:"varint,15,opt,name=typeCodeRid,proto3" json:"typeCodeRid,omitempty"`
	// RemoteID 序列号
	SeqNumRid uint32 `protobuf:"varint,16,opt,name=seqNumRid,proto3" json:"seqNumRid,omitempty"`
	// 分类类型
	ClassificationType uint32 `protobuf:"varint,17,opt,name=classificationType,proto3" json:"classificationType,omitempty"`
	// 无人机操作员位置类型
	OperatorLocationType uint32 `protobuf:"varint,18,opt,name=operatorLocationType,proto3" json:"operatorLocationType,omitempty"`
	// 操作状态
	OperationStatus uint32 `protobuf:"varint,19,opt,name=operationStatus,proto3" json:"operationStatus,omitempty"`
	HeightType      uint32 `protobuf:"varint,20,opt,name=HeightType,proto3" json:"HeightType,omitempty"`
	// RemoteID 信号频率
	SignalFreqRid int32 `protobuf:"varint,21,opt,name=signalFreqRid,proto3" json:"signalFreqRid,omitempty"`
	// 无人机RemoteID天线噪声强度 (dBm)
	NoisePowerRid int32 `protobuf:"varint,22,opt,name=NoisePowerRid,proto3" json:"NoisePowerRid,omitempty"`
	// RemoteID 信号功率
	SignalPowerRid uint32 `protobuf:"varint,23,opt,name=signalPowerRid,proto3" json:"signalPowerRid,omitempty"`
	// RemoteID 时间戳
	TimestampRid uint32 `protobuf:"varint,24,opt,name=timestampRid,proto3" json:"timestampRid,omitempty"`
	// 预留字段，默认为0
	ReserveRid uint32 `protobuf:"varint,25,opt,name=reserveRid,proto3" json:"reserveRid,omitempty"`
	// DroneID only
	TypeCodeDid uint32 `protobuf:"varint,26,opt,name=typeCodeDid,proto3" json:"typeCodeDid,omitempty"`
	SeqNumDid   uint32 `protobuf:"varint,27,opt,name=seqNumDid,proto3" json:"seqNumDid,omitempty"`
	// 无人机海拔高度 (m)
	Altitude float64 `protobuf:"fixed64,28,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// 无人机X方向速度 (m/s)
	SpeedX float64 `protobuf:"fixed64,29,opt,name=speedX,proto3" json:"speedX,omitempty"`
	// 无人机Y方向速度 (m/s)
	SpeedY        float64 `protobuf:"fixed64,30,opt,name=speedY,proto3" json:"speedY,omitempty"`
	SignalFreqDid uint32  `protobuf:"varint,31,opt,name=signalFreqDid,proto3" json:"signalFreqDid,omitempty"`
	//  无人机DroneID信号强度(dBm),通道1
	SignalPowerDidCh1 int32 `protobuf:"varint,32,opt,name=SignalPowerDidCh1,proto3" json:"SignalPowerDidCh1,omitempty"`
	// 无人机DroneID信号强度(dBm)，通道2
	SignalPowerDidCh2 int32 `protobuf:"varint,33,opt,name=SignalPowerDidCh2,proto3" json:"SignalPowerDidCh2,omitempty"`
	// 无人机GPS时间戳：1970年1月1日至今毫秒数(ms)
	GpsClock uint64 `protobuf:"varint,34,opt,name=gpsClock,proto3" json:"gpsClock,omitempty"`
	// 预留，默认为0
	ReserveDid uint32 `protobuf:"varint,35,opt,name=reserveDid,proto3" json:"reserveDid,omitempty"`
	Role       int32  `protobuf:"varint,36,opt,name=role,proto3" json:"role,omitempty"` //无人机角色
}

func (x *TracerDroneIdRemoteIdDetectDescription) Reset() {
	*x = TracerDroneIdRemoteIdDetectDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerDroneIdRemoteIdDetectDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerDroneIdRemoteIdDetectDescription) ProtoMessage() {}

func (x *TracerDroneIdRemoteIdDetectDescription) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerDroneIdRemoteIdDetectDescription.ProtoReflect.Descriptor instead.
func (*TracerDroneIdRemoteIdDetectDescription) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{78}
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetDirection() float64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetVerticalSpeed() float64 {
	if x != nil {
		return x.VerticalSpeed
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetPilotLongitude() float64 {
	if x != nil {
		return x.PilotLongitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetPilotLatitude() float64 {
	if x != nil {
		return x.PilotLatitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetHomeLongitude() float64 {
	if x != nil {
		return x.HomeLongitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetHomeLatitude() float64 {
	if x != nil {
		return x.HomeLatitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetAliveTime() uint32 {
	if x != nil {
		return x.AliveTime
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetTargetMask() uint32 {
	if x != nil {
		return x.TargetMask
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetTypeCodeRid() uint32 {
	if x != nil {
		return x.TypeCodeRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSeqNumRid() uint32 {
	if x != nil {
		return x.SeqNumRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetClassificationType() uint32 {
	if x != nil {
		return x.ClassificationType
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetOperatorLocationType() uint32 {
	if x != nil {
		return x.OperatorLocationType
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetOperationStatus() uint32 {
	if x != nil {
		return x.OperationStatus
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetHeightType() uint32 {
	if x != nil {
		return x.HeightType
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSignalFreqRid() int32 {
	if x != nil {
		return x.SignalFreqRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetNoisePowerRid() int32 {
	if x != nil {
		return x.NoisePowerRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSignalPowerRid() uint32 {
	if x != nil {
		return x.SignalPowerRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetTimestampRid() uint32 {
	if x != nil {
		return x.TimestampRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetReserveRid() uint32 {
	if x != nil {
		return x.ReserveRid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetTypeCodeDid() uint32 {
	if x != nil {
		return x.TypeCodeDid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSeqNumDid() uint32 {
	if x != nil {
		return x.SeqNumDid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSpeedX() float64 {
	if x != nil {
		return x.SpeedX
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSpeedY() float64 {
	if x != nil {
		return x.SpeedY
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSignalFreqDid() uint32 {
	if x != nil {
		return x.SignalFreqDid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSignalPowerDidCh1() int32 {
	if x != nil {
		return x.SignalPowerDidCh1
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetSignalPowerDidCh2() int32 {
	if x != nil {
		return x.SignalPowerDidCh2
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetGpsClock() uint64 {
	if x != nil {
		return x.GpsClock
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetReserveDid() uint32 {
	if x != nil {
		return x.ReserveDid
	}
	return 0
}

func (x *TracerDroneIdRemoteIdDetectDescription) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

// Tracer侦测数据
type TracerDroneIdRemoteIdDetectReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   string                                    `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Info []*TracerDroneIdRemoteIdDetectDescription `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"` // string eventId = 3;
}

func (x *TracerDroneIdRemoteIdDetectReport) Reset() {
	*x = TracerDroneIdRemoteIdDetectReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerDroneIdRemoteIdDetectReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerDroneIdRemoteIdDetectReport) ProtoMessage() {}

func (x *TracerDroneIdRemoteIdDetectReport) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerDroneIdRemoteIdDetectReport.ProtoReflect.Descriptor instead.
func (*TracerDroneIdRemoteIdDetectReport) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{79}
}

func (x *TracerDroneIdRemoteIdDetectReport) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *TracerDroneIdRemoteIdDetectReport) GetInfo() []*TracerDroneIdRemoteIdDetectDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type TracerDroneIdRemoteIdDetectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EquipmentMessageBoxEntity         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *TracerDroneIdRemoteIdDetectReport `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TracerDroneIdRemoteIdDetectInfo) Reset() {
	*x = TracerDroneIdRemoteIdDetectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerDroneIdRemoteIdDetectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerDroneIdRemoteIdDetectInfo) ProtoMessage() {}

func (x *TracerDroneIdRemoteIdDetectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerDroneIdRemoteIdDetectInfo.ProtoReflect.Descriptor instead.
func (*TracerDroneIdRemoteIdDetectInfo) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{80}
}

func (x *TracerDroneIdRemoteIdDetectInfo) GetHeader() *EquipmentMessageBoxEntity {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TracerDroneIdRemoteIdDetectInfo) GetData() *TracerDroneIdRemoteIdDetectReport {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x70,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x62,
	0x52, 0x61, 0x77, 0x41, 0x75, 0x74, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x61, 0x72, 0x50, 0x6c, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x0f, 0x52, 0x61, 0x64, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x61, 0x64, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46,
	0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x53, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x01,
	0x0a, 0x0c, 0x52, 0x61, 0x64, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x52, 0x61, 0x64, 0x61, 0x72, 0x42, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01,
	0x0a, 0x13, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x48, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x13, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x48, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x52, 0x61, 0x64, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x64, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x12, 0x52, 0x61, 0x64, 0x61,
	0x72, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x11, 0x53, 0x70, 0x6f,
	0x6f, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x53, 0x66, 0x6c,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x66, 0x6c, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69, 0x6d, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x53, 0x66, 0x6c,
	0x48, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x0c, 0x46, 0x70, 0x76, 0x48, 0x65, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x70, 0x76, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x46, 0x70, 0x76, 0x48, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x70, 0x76,
	0x48, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x0d, 0x46, 0x70, 0x76, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x70, 0x76, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x46, 0x70,
	0x76, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x70, 0x76, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a,
	0x10, 0x41, 0x67, 0x78, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x78, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x83, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x78,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x0d, 0x41, 0x67, 0x78, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x78, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x0f, 0x41, 0x67, 0x78, 0x44, 0x65, 0x76, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x67, 0x78, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x0f, 0x41, 0x67, 0x78, 0x50, 0x54, 0x5a, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x78, 0x50, 0x54, 0x5a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x41, 0x67, 0x78, 0x50, 0x54, 0x5a, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x78, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x0e, 0x41, 0x67, 0x78, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x4f, 0x66, 0x66, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x66, 0x22, 0x77, 0x0a, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xec, 0x0a, 0x0a, 0x22,
	0x44, 0x62, 0x52, 0x61, 0x77, 0x41, 0x75, 0x74, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x61, 0x72, 0x50,
	0x6c, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x44, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x44, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x43,
	0x68, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65,
	0x72, 0x43, 0x68, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75,
	0x6f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6d, 0x62, 0x69, 0x67,
	0x75, 0x6f, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x62, 0x73, 0x56, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x62, 0x73, 0x56, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x77, 0x73, 0x54, 0x61, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x77, 0x73, 0x54, 0x61, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x78, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x76, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x7a, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x76, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x1c, 0x0a, 0x09, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x78, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x30, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x30, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x31, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x31, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xf7, 0x02, 0x0a,
	0x0d, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x4f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x22, 0x5b, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x35, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x04, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x72,
	0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x67, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73,
	0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xff,
	0x04, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59,
	0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x64, 0x65, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x64, 0x65, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0xb5, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71,
	0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x71, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x78, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x64, 0x78, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x46, 0x72, 0x65,
	0x71, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x61, 0x76, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x61, 0x76,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x46, 0x72, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x46, 0x72, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x72, 0x76, 0x65, 0x22, 0x7b,
	0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x53, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x53, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x1a, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x53, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6d, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6d, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x05, 0x0a, 0x15, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x69, 0x74, 0x46, 0x72, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x72, 0x65, 0x71, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x72, 0x65,
	0x71, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x7a, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x75, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x67, 0x75, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x75, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x75, 0x6e, 0x41, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x75, 0x6e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x67, 0x75, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x48, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x48, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x44, 0x72, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x55, 0x61, 0x76, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0xc6, 0x04, 0x0a, 0x14, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x55, 0x61, 0x76, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x75, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x44, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x18, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x70, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x69, 0x67, 0x50,
	0x72, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xb1, 0x01, 0x0a, 0x1b, 0x52, 0x61, 0x64, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x7a, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x7a, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x7a, 0x69, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x7a, 0x69,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6c, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x65, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6b, 0x67, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6b, 0x67, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x48, 0x69, 0x74, 0x55, 0x61, 0x76,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72,
	0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x7f, 0x0a, 0x15, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x48, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x2a, 0x0a, 0x04, 0x75, 0x61, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x74, 0x55, 0x61, 0x76, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x75, 0x61, 0x76, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x48,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x39, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x52, 0x61, 0x64,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x75, 0x73, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0xf7, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x67, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x55, 0x72,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69,
	0x6d, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d,
	0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x55, 0x72, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x04, 0x0a, 0x0c, 0x55, 0x72, 0x64,
	0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x7a,
	0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x72, 0x75, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x12, 0x55, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x72, 0x64, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x6a, 0x0a, 0x0f, 0x55, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x8f,
	0x01, 0x0a, 0x1d, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x69,
	0x6d, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xe8, 0x05, 0x0a, 0x1c, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x53, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53,
	0x61, 0x69, 0x6c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x46,
	0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x8a, 0x04, 0x0a, 0x16,
	0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x46, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x68, 0x69, 0x74, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x46, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x75, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x67, 0x75, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x75, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x67, 0x75, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x75, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x75, 0x6e, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x74,
	0x72, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x74, 0x72, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x65, 0x61, 0x67,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x65, 0x61,
	0x67, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x92, 0x06, 0x0a, 0x1a, 0x47, 0x69, 0x6d,
	0x62, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59,
	0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x44, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x82, 0x02,
	0x0a, 0x12, 0x46, 0x70, 0x76, 0x48, 0x65, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x33, 0x0a, 0x15, 0x46, 0x70, 0x76, 0x48, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x46, 0x70, 0x76, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x71, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x78, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x78, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x78, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x78, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x70, 0x76, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x46,
	0x70, 0x76, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x61, 0x76, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x61, 0x76,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x46, 0x72, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x46, 0x72, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x22, 0xe7, 0x06, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x72, 0x6f,
	0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x59, 0x61, 0x77, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x13,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x44, 0x65, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x44, 0x65, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x71, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64,
	0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x78, 0x48, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x78, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69,
	0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69,
	0x6c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x69, 0x6c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x12, 0x46, 0x70, 0x76, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe8, 0x01, 0x0a, 0x13,
	0x41, 0x67, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x5a, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x46, 0x6f, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x48, 0x46, 0x6f, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x56,
	0x46, 0x6f, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x56, 0x46, 0x6f, 0x76, 0x12,
	0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x78, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf5, 0x03, 0x0a, 0x17, 0x41, 0x67, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x63, 0x74, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x74, 0x58,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x63, 0x74, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x65, 0x63, 0x74, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x63, 0x74, 0x57, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63, 0x74, 0x57, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x63, 0x74, 0x48, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x63,
	0x74, 0x48, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x74, 0x58, 0x56, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x63, 0x74, 0x58, 0x56, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x74, 0x59, 0x56, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x63, 0x74,
	0x59, 0x56, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x79, 0x50, 0x72, 0x6f,
	0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x79,
	0x50, 0x72, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x8a,
	0x01, 0x0a, 0x12, 0x41, 0x67, 0x78, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x73,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x22, 0xdb, 0x0a, 0x0a, 0x11,
	0x41, 0x67, 0x78, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x44, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x44, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x68,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x70, 0x70, 0x6c, 0x65, 0x72,
	0x43, 0x68, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6d, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75,
	0x6f, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x62, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x62, 0x73, 0x56, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x62, 0x73, 0x56, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x77, 0x73, 0x54, 0x61, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x77, 0x73, 0x54, 0x61, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x76, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x7a, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x76, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x1c, 0x0a, 0x09, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x7a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x6f, 0x72, 0x63, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x30, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x30, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x31, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x42, 0x69, 0x74, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4c, 0x0a, 0x0f, 0x41, 0x67, 0x78,
	0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x29, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x70,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x67, 0x78, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x53, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x76, 0x53, 0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x41, 0x67, 0x78, 0x50, 0x54,
	0x5a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x74, 0x7a, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x70, 0x74, 0x7a, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x74, 0x7a, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x70, 0x74, 0x7a, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x74, 0x7a, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x70, 0x74, 0x7a, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61,
	0x7a, 0x69, 0x6d, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x41, 0x7a, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x41, 0x7a, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x45, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6f, 0x6d, 0x65, 0x67, 0x61, 0x45, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x22, 0xe0, 0x09, 0x0a,
	0x26, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d,
	0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x52, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x52, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x69, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x44, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x44, 0x69, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x44, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x70, 0x65, 0x65, 0x64, 0x58, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x65, 0x65, 0x64, 0x59, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x70, 0x65, 0x65, 0x64, 0x59, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x44, 0x69, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x71,
	0x44, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x44, 0x69, 0x64, 0x43, 0x68, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x69, 0x64, 0x43, 0x68,
	0x31, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x44, 0x69, 0x64, 0x43, 0x68, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x69, 0x64, 0x43, 0x68, 0x32, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x70, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x79, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x73, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x70, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x20, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x65, 0x6e, 0x64, 0x2e, 0x63, 0x75, 0x61, 0x76,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5a, 0x07, 0x2e, 0x2f, 0x64, 0x65, 0x70, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 81)
var file_data_proto_goTypes = []interface{}{
	(*ClientReport)(nil),                           // 0: appAgent.ClientReport
	(*RadarTrackInfo)(nil),                         // 1: appAgent.RadarTrackInfo
	(*RadarStatusInfo)(nil),                        // 2: appAgent.RadarStatusInfo
	(*DroneStatusInfo)(nil),                        // 3: appAgent.DroneStatusInfo
	(*TracerDetectInfo)(nil),                       // 4: appAgent.TracerDetectInfo
	(*TracerRemoteDetectInfo)(nil),                 // 5: appAgent.TracerRemoteDetectInfo
	(*TracerFreqDetectInfo)(nil),                   // 6: appAgent.TracerFreqDetectInfo
	(*TracerFreqDataInfo)(nil),                     // 7: appAgent.TracerFreqDataInfo
	(*RadarPosture)(nil),                           // 8: appAgent.RadarPosture
	(*RadarBeamSteerConfig)(nil),                   // 9: appAgent.RadarBeamSteerConfig
	(*OtaFileDownloadStatusInfo)(nil),              // 10: appAgent.OtaFileDownloadStatusInfo
	(*UpgradeStatusInfo)(nil),                      // 11: appAgent.UpgradeStatusInfo
	(*ScreenHeartBeatInfo)(nil),                    // 12: appAgent.ScreenHeartBeatInfo
	(*ScreenHitStatusInfo)(nil),                    // 13: appAgent.ScreenHitStatusInfo
	(*ScreenHitResultInfo)(nil),                    // 14: appAgent.ScreenHitResultInfo
	(*SetRadarConnReqInfo)(nil),                    // 15: appAgent.SetRadarConnReqInfo
	(*RadarFuseLevelInfo)(nil),                     // 16: appAgent.RadarFuseLevelInfo
	(*SpooferStatusInfo)(nil),                      // 17: appAgent.SpooferStatusInfo
	(*SflDetectInfo)(nil),                          // 18: appAgent.SflDetectInfo
	(*SflHeartInfo)(nil),                           // 19: appAgent.SflHeartInfo
	(*SflHitStateInfo)(nil),                        // 20: appAgent.SflHitStateInfo
	(*FpvHeartInfo)(nil),                           // 21: appAgent.FpvHeartInfo
	(*FpvHitStateInfo)(nil),                        // 22: appAgent.FpvHitStateInfo
	(*FpvDetectInfo)(nil),                          // 23: appAgent.FpvDetectInfo
	(*FpvVideoStreams)(nil),                        // 24: appAgent.FpvVideoStreams
	(*AgxHeartBeatInfo)(nil),                       // 25: appAgent.AgxHeartBeatInfo
	(*AgxPerceptionInfo)(nil),                      // 26: appAgent.AgxPerceptionInfo
	(*AgxDetectInfo)(nil),                          // 27: appAgent.AgxDetectInfo
	(*AgxDevStateInfo)(nil),                        // 28: appAgent.AgxDevStateInfo
	(*AgxPTZStateInfo)(nil),                        // 29: appAgent.AgxPTZStateInfo
	(*AgxPTZCalibrationInfo)(nil),                  // 30: appAgent.AgxPTZCalibrationInfo
	(*AgxCalibration)(nil),                         // 31: appAgent.AgxCalibration
	(*EquipmentMessageBoxEntity)(nil),              // 32: appAgent.EquipmentMessageBoxEntity
	(*DbRawAutelRadarPlotTrackBodyEntity)(nil),     // 33: appAgent.DbRawAutelRadarPlotTrackBodyEntity
	(*RadarStatusEntity)(nil),                      // 34: appAgent.RadarStatusEntity
	(*DroneIDReport)(nil),                          // 35: appAgent.DroneIDReport
	(*TracerDetectReport)(nil),                     // 36: appAgent.TracerDetectReport
	(*TracerDetectDescription)(nil),                // 37: appAgent.TracerDetectDescription
	(*TracerRemoteDetectReport)(nil),               // 38: appAgent.TracerRemoteDetectReport
	(*TracerRemoteDetectDescription)(nil),          // 39: appAgent.TracerRemoteDetectDescription
	(*TracerFreqDetectReport)(nil),                 // 40: appAgent.TracerFreqDetectReport
	(*TracerFreqDetectDescription)(nil),            // 41: appAgent.TracerFreqDetectDescription
	(*TracerSFreqDataReport)(nil),                  // 42: appAgent.TracerSFreqDataReport
	(*TracerSFreqDataDescription)(nil),             // 43: appAgent.TracerSFreqDataDescription
	(*ScreenHeartBeatEntity)(nil),                  // 44: appAgent.ScreenHeartBeatEntity
	(*ScreenHeartUavEntity)(nil),                   // 45: appAgent.ScreenHeartUavEntity
	(*RadarUploadPostureEntity)(nil),               // 46: appAgent.RadarUploadPostureEntity
	(*RadarUploadBeamConfigEntity)(nil),            // 47: appAgent.RadarUploadBeamConfigEntity
	(*OtaFileDownloadStatus)(nil),                  // 48: appAgent.OtaFileDownloadStatus
	(*UpgradeStatus)(nil),                          // 49: appAgent.UpgradeStatus
	(*HitUavEntity)(nil),                           // 50: appAgent.HitUavEntity
	(*ScreenHitStatusEntity)(nil),                  // 51: appAgent.ScreenHitStatusEntity
	(*HitResult)(nil),                              // 52: appAgent.HitResult
	(*SetRadarConnReq)(nil),                        // 53: appAgent.SetRadarConnReq
	(*RadarFuseLevel)(nil),                         // 54: appAgent.RadarFuseLevel
	(*SpooferStatus)(nil),                          // 55: appAgent.SpooferStatus
	(*UrdDeviceInfo)(nil),                          // 56: appAgent.UrdDeviceInfo
	(*UrdDeviceInfoUpload)(nil),                    // 57: appAgent.UrdDeviceInfoUpload
	(*UrdDroneInfo)(nil),                           // 58: appAgent.UrdDroneInfo
	(*UrdDroneInfoUpload)(nil),                     // 59: appAgent.UrdDroneInfoUpload
	(*UrdSpectrumInfo)(nil),                        // 60: appAgent.UrdSpectrumInfo
	(*GimbalCounterDetectSocketInfo)(nil),          // 61: appAgent.GimbalCounterDetectSocketInfo
	(*GimbalCounterDetectDroneInfo)(nil),           // 62: appAgent.GimbalCounterDetectDroneInfo
	(*GimbalCounterHeartInfo)(nil),                 // 63: appAgent.GimbalCounterHeartInfo
	(*GimbalCounterHitSocketInfo)(nil),             // 64: appAgent.GimbalCounterHitSocketInfo
	(*FpvHeartInfoReport)(nil),                     // 65: appAgent.FpvHeartInfoReport
	(*FpvHitStateInfoReport)(nil),                  // 66: appAgent.FpvHitStateInfoReport
	(*FpvDetectInfoReport)(nil),                    // 67: appAgent.FpvDetectInfoReport
	(*FpvDetect)(nil),                              // 68: appAgent.FpvDetect
	(*DroneInfo)(nil),                              // 69: appAgent.DroneInfo
	(*FpvVideoStreamItem)(nil),                     // 70: appAgent.FpvVideoStreamItem
	(*AgxPerceptionReport)(nil),                    // 71: appAgent.AgxPerceptionReport
	(*AgxPerceptionReportInfo)(nil),                // 72: appAgent.AgxPerceptionReportInfo
	(*AgxHeartBeatReport)(nil),                     // 73: appAgent.AgxHeartBeatReport
	(*AgxDetectInfoList)(nil),                      // 74: appAgent.AgxDetectInfoList
	(*AgxDevStateList)(nil),                        // 75: appAgent.AgxDevStateList
	(*AgxDeviceSn)(nil),                            // 76: appAgent.AgxDeviceSn
	(*AgxPTZStateList)(nil),                        // 77: appAgent.AgxPTZStateList
	(*TracerDroneIdRemoteIdDetectDescription)(nil), // 78: appAgent.TracerDroneIdRemoteIdDetectDescription
	(*TracerDroneIdRemoteIdDetectReport)(nil),      // 79: appAgent.TracerDroneIdRemoteIdDetectReport
	(*TracerDroneIdRemoteIdDetectInfo)(nil),        // 80: appAgent.TracerDroneIdRemoteIdDetectInfo
}
var file_data_proto_depIdxs = []int32{
	32, // 0: appAgent.RadarTrackInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	33, // 1: appAgent.RadarTrackInfo.data:type_name -> appAgent.DbRawAutelRadarPlotTrackBodyEntity
	32, // 2: appAgent.RadarStatusInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	34, // 3: appAgent.RadarStatusInfo.data:type_name -> appAgent.RadarStatusEntity
	32, // 4: appAgent.DroneStatusInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	35, // 5: appAgent.DroneStatusInfo.data:type_name -> appAgent.DroneIDReport
	32, // 6: appAgent.TracerDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	36, // 7: appAgent.TracerDetectInfo.data:type_name -> appAgent.TracerDetectReport
	32, // 8: appAgent.TracerRemoteDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	38, // 9: appAgent.TracerRemoteDetectInfo.data:type_name -> appAgent.TracerRemoteDetectReport
	32, // 10: appAgent.TracerFreqDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	40, // 11: appAgent.TracerFreqDetectInfo.data:type_name -> appAgent.TracerFreqDetectReport
	32, // 12: appAgent.TracerFreqDataInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	42, // 13: appAgent.TracerFreqDataInfo.data:type_name -> appAgent.TracerSFreqDataReport
	32, // 14: appAgent.RadarPosture.header:type_name -> appAgent.EquipmentMessageBoxEntity
	46, // 15: appAgent.RadarPosture.data:type_name -> appAgent.RadarUploadPostureEntity
	32, // 16: appAgent.RadarBeamSteerConfig.header:type_name -> appAgent.EquipmentMessageBoxEntity
	47, // 17: appAgent.RadarBeamSteerConfig.data:type_name -> appAgent.RadarUploadBeamConfigEntity
	32, // 18: appAgent.OtaFileDownloadStatusInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	48, // 19: appAgent.OtaFileDownloadStatusInfo.data:type_name -> appAgent.OtaFileDownloadStatus
	32, // 20: appAgent.UpgradeStatusInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	49, // 21: appAgent.UpgradeStatusInfo.data:type_name -> appAgent.UpgradeStatus
	32, // 22: appAgent.ScreenHeartBeatInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	44, // 23: appAgent.ScreenHeartBeatInfo.data:type_name -> appAgent.ScreenHeartBeatEntity
	32, // 24: appAgent.ScreenHitStatusInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	51, // 25: appAgent.ScreenHitStatusInfo.data:type_name -> appAgent.ScreenHitStatusEntity
	32, // 26: appAgent.ScreenHitResultInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	52, // 27: appAgent.ScreenHitResultInfo.data:type_name -> appAgent.HitResult
	32, // 28: appAgent.SetRadarConnReqInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	53, // 29: appAgent.SetRadarConnReqInfo.data:type_name -> appAgent.SetRadarConnReq
	32, // 30: appAgent.RadarFuseLevelInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	54, // 31: appAgent.RadarFuseLevelInfo.data:type_name -> appAgent.RadarFuseLevel
	32, // 32: appAgent.SpooferStatusInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	55, // 33: appAgent.SpooferStatusInfo.data:type_name -> appAgent.SpooferStatus
	32, // 34: appAgent.SflDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	61, // 35: appAgent.SflDetectInfo.data:type_name -> appAgent.GimbalCounterDetectSocketInfo
	32, // 36: appAgent.SflHeartInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	63, // 37: appAgent.SflHeartInfo.data:type_name -> appAgent.GimbalCounterHeartInfo
	32, // 38: appAgent.SflHitStateInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	64, // 39: appAgent.SflHitStateInfo.data:type_name -> appAgent.GimbalCounterHitSocketInfo
	32, // 40: appAgent.FpvHeartInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	65, // 41: appAgent.FpvHeartInfo.data:type_name -> appAgent.FpvHeartInfoReport
	32, // 42: appAgent.FpvHitStateInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	66, // 43: appAgent.FpvHitStateInfo.data:type_name -> appAgent.FpvHitStateInfoReport
	32, // 44: appAgent.FpvDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	67, // 45: appAgent.FpvDetectInfo.data:type_name -> appAgent.FpvDetectInfoReport
	32, // 46: appAgent.FpvVideoStreams.header:type_name -> appAgent.EquipmentMessageBoxEntity
	70, // 47: appAgent.FpvVideoStreams.data:type_name -> appAgent.FpvVideoStreamItem
	32, // 48: appAgent.AgxHeartBeatInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	73, // 49: appAgent.AgxHeartBeatInfo.data:type_name -> appAgent.AgxHeartBeatReport
	32, // 50: appAgent.AgxPerceptionInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	71, // 51: appAgent.AgxPerceptionInfo.data:type_name -> appAgent.AgxPerceptionReport
	32, // 52: appAgent.AgxDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	74, // 53: appAgent.AgxDetectInfo.data:type_name -> appAgent.AgxDetectInfoList
	32, // 54: appAgent.AgxDevStateInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	75, // 55: appAgent.AgxDevStateInfo.data:type_name -> appAgent.AgxDevStateList
	32, // 56: appAgent.AgxPTZStateInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	77, // 57: appAgent.AgxPTZStateInfo.data:type_name -> appAgent.AgxPTZStateList
	32, // 58: appAgent.AgxPTZCalibrationInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	31, // 59: appAgent.AgxPTZCalibrationInfo.data:type_name -> appAgent.AgxCalibration
	37, // 60: appAgent.TracerDetectReport.info:type_name -> appAgent.TracerDetectDescription
	39, // 61: appAgent.TracerRemoteDetectReport.info:type_name -> appAgent.TracerRemoteDetectDescription
	41, // 62: appAgent.TracerFreqDetectReport.info:type_name -> appAgent.TracerFreqDetectDescription
	43, // 63: appAgent.TracerSFreqDataReport.info:type_name -> appAgent.TracerSFreqDataDescription
	45, // 64: appAgent.ScreenHeartBeatEntity.info:type_name -> appAgent.ScreenHeartUavEntity
	50, // 65: appAgent.ScreenHitStatusEntity.uavs:type_name -> appAgent.HitUavEntity
	32, // 66: appAgent.UrdDeviceInfoUpload.header:type_name -> appAgent.EquipmentMessageBoxEntity
	56, // 67: appAgent.UrdDeviceInfoUpload.data:type_name -> appAgent.UrdDeviceInfo
	32, // 68: appAgent.UrdDroneInfoUpload.header:type_name -> appAgent.EquipmentMessageBoxEntity
	58, // 69: appAgent.UrdDroneInfoUpload.data:type_name -> appAgent.UrdDroneInfo
	32, // 70: appAgent.UrdSpectrumInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	62, // 71: appAgent.GimbalCounterDetectSocketInfo.list:type_name -> appAgent.GimbalCounterDetectDroneInfo
	68, // 72: appAgent.FpvDetectInfoReport.list:type_name -> appAgent.FpvDetect
	72, // 73: appAgent.AgxPerceptionReport.list:type_name -> appAgent.AgxPerceptionReportInfo
	76, // 74: appAgent.AgxDevStateList.list:type_name -> appAgent.AgxDeviceSn
	78, // 75: appAgent.TracerDroneIdRemoteIdDetectReport.info:type_name -> appAgent.TracerDroneIdRemoteIdDetectDescription
	32, // 76: appAgent.TracerDroneIdRemoteIdDetectInfo.header:type_name -> appAgent.EquipmentMessageBoxEntity
	79, // 77: appAgent.TracerDroneIdRemoteIdDetectInfo.data:type_name -> appAgent.TracerDroneIdRemoteIdDetectReport
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarTrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DroneStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerRemoteDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerFreqDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerFreqDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarPosture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarBeamSteerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFileDownloadStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenHeartBeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenHitStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenHitResultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRadarConnReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarFuseLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpooferStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SflDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SflHeartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SflHitStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvHeartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvHitStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvVideoStreams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxHeartBeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxPerceptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxDevStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxPTZStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxPTZCalibrationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentMessageBoxEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbRawAutelRadarPlotTrackBodyEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarStatusEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DroneIDReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerDetectReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerDetectDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerRemoteDetectReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerRemoteDetectDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerFreqDetectReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerFreqDetectDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerSFreqDataReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerSFreqDataDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenHeartBeatEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenHeartUavEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarUploadPostureEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarUploadBeamConfigEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFileDownloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitUavEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenHitStatusEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRadarConnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarFuseLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpooferStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrdDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrdDeviceInfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrdDroneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrdDroneInfoUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrdSpectrumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GimbalCounterDetectSocketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GimbalCounterDetectDroneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GimbalCounterHeartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GimbalCounterHitSocketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvHeartInfoReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvHitStateInfoReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvDetectInfoReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DroneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpvVideoStreamItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxPerceptionReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxPerceptionReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxHeartBeatReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxDetectInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxDevStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxDeviceSn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgxPTZStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerDroneIdRemoteIdDetectDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerDroneIdRemoteIdDetectReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerDroneIdRemoteIdDetectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   81,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}
